# -*- coding: mbcs -*-
typelib_path = u'c:\\program files (x86)\\arcgis\\desktop10.2\\com\\esriEditor.olb'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from ctypes import HRESULT
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes import CoClass
import comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2
import comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2
import comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2
import comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2
import comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2
import comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2
from ctypes.wintypes import VARIANT_BOOL
import comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2
from comtypes import BSTR
from comtypes.automation import VARIANT
import comtypes.gen._D92377DC_FAB1_4DFB_A4C1_61BD8C40DBEB_0_10_2
from comtypes import IUnknown


class IAttributeWindowEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Attribute Inspector events. Implement it to listen to specific events that occur when the Attribute Inspector is used.'
    _iid_ = GUID('{AF97D767-9C26-400D-A176-37D67B6D3BD2}')
    _idlflags_ = ['oleautomation', 'hidden']
IAttributeWindowEvents._methods_ = [
    COMMETHOD([helpstring(u'Called when the feature highlighted within the tree view of the Attribute Inspector changes.')], HRESULT, 'OnSelectionChanged'),
    COMMETHOD([helpstring(u'Called when the Attribute Inspector dialog is activated.')], HRESULT, 'OnActivate'),
    COMMETHOD([helpstring(u'Called when the Attribute Inspector dialog is deactivated.')], HRESULT, 'OnDeactivate'),
    COMMETHOD([helpstring(u'Called when the position of the Attribute Inspector dialog changes.')], HRESULT, 'OnPositionChanged'),
]
################################################################
## code template for IAttributeWindowEvents implementation
##class IAttributeWindowEvents_Impl(object):
##    def OnDeactivate(self):
##        u'Called when the Attribute Inspector dialog is deactivated.'
##        #return 
##
##    def OnPositionChanged(self):
##        u'Called when the position of the Attribute Inspector dialog changes.'
##        #return 
##
##    def OnActivate(self):
##        u'Called when the Attribute Inspector dialog is activated.'
##        #return 
##
##    def OnSelectionChanged(self):
##        u'Called when the feature highlighted within the tree view of the Attribute Inspector changes.'
##        #return 
##

class EditToolEvents(CoClass):
    u'Helper coclass for working with the outbound interface on noncreatable object classes in VB.'
    _reg_clsid_ = GUID('{C4C5DEA9-74DF-4869-B001-FF26BEEBDE89}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IEditToolEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to events generated by the edit tool.'
    _iid_ = GUID('{20C9BB7A-2035-4454-A17B-A812B6E400B6}')
    _idlflags_ = ['oleautomation']
EditToolEvents._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
EditToolEvents._outgoing_interfaces_ = [IEditToolEvents]

class IEditEvents5(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to more editor events.  Implement it to listen for specific events that occur during an edit session.'
    _iid_ = GUID('{ACCCCEE1-1272-44CD-A484-555020B84878}')
    _idlflags_ = ['oleautomation']
IEditEvents5._methods_ = [
    COMMETHOD([helpstring(u'Called when the current template changes.')], HRESULT, 'OnCurrentTemplateChanged',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IEditTemplate), 'editTemplate' )),
    COMMETHOD([helpstring(u'Called when a templates are removed.')], HRESULT, 'OnTemplatesRemoved',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'editTemplates' )),
    COMMETHOD([helpstring(u'Called when a templates are added.')], HRESULT, 'OnTemplatesAdded',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'editTemplates' )),
    COMMETHOD([helpstring(u'Called when a template is modified.')], HRESULT, 'OnTemplateModified',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IEditTemplate), 'editTemplate' )),
    COMMETHOD([helpstring(u"Called when the sketch's selected vertices changes.")], HRESULT, 'OnVertexSelectionChanged'),
    COMMETHOD([helpstring(u'Called when the Shape Constructor changes.')], HRESULT, 'OnShapeConstructorChanged'),
]
################################################################
## code template for IEditEvents5 implementation
##class IEditEvents5_Impl(object):
##    def OnTemplatesAdded(self, editTemplates):
##        u'Called when a templates are added.'
##        #return 
##
##    def OnTemplatesRemoved(self, editTemplates):
##        u'Called when a templates are removed.'
##        #return 
##
##    def OnTemplateModified(self, editTemplate):
##        u'Called when a template is modified.'
##        #return 
##
##    def OnVertexSelectionChanged(self):
##        u"Called when the sketch's selected vertices changes."
##        #return 
##
##    def OnShapeConstructorChanged(self):
##        u'Called when the Shape Constructor changes.'
##        #return 
##
##    def OnCurrentTemplateChanged(self, editTemplate):
##        u'Called when the current template changes.'
##        #return 
##

class SketchOperation(CoClass):
    u'Provides undo/redo capabilities for edit sketch modifications.'
    _reg_clsid_ = GUID('{6D3A6F60-9115-11D1-8461-0000F875B9C6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class ISketchOperation(comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.IOperation):
    _case_insensitive_ = True
    u'Provides access to members that control undo/redo capabilities for edit sketch modifications.'
    _iid_ = GUID('{6D3A6F61-9115-11D1-8461-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
class ISketchOperation2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control undo/redo capabilities for edit sketch modifications.'
    _iid_ = GUID('{223EE90F-0D7D-4844-9F01-A62CB7407897}')
    _idlflags_ = ['oleautomation']
SketchOperation._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISketchOperation, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.IOperation, ISketchOperation2]

class LeaderAnnoConstructor(CoClass):
    u'An annotation feature constructor for creating leader annotation.'
    _reg_clsid_ = GUID('{717A5E39-C7CF-4339-B09B-7C20615675F5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IAnnotationConstructor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation feature edit sketch constructor.'
    _iid_ = GUID('{E7DF3443-4572-4056-B075-BF69E77A0FA6}')
    _idlflags_ = ['oleautomation']
LeaderAnnoConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationConstructor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class EditEvents5(CoClass):
    u'Helper coclass for working with the nondefault outbound IEditEvents5 interface in VB.'
    _reg_clsid_ = GUID('{B8109E09-AB2D-434D-ABF4-F07EB481312D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
EditEvents5._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
EditEvents5._outgoing_interfaces_ = [IEditEvents5]

class EditEvents2(CoClass):
    u'Helper coclass for working with the nondefault outbound IEditEvents2 interface in VB.'
    _reg_clsid_ = GUID('{CB9D0C6F-D38A-4628-BE49-7DD0B24EBCEC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IEditEvents2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to more editor events.  Implement it to listen for specific events that occur during an edit session.'
    _iid_ = GUID('{910794B0-106F-4B0E-A102-0C47B8D0FDFC}')
    _idlflags_ = ['oleautomation']
EditEvents2._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
EditEvents2._outgoing_interfaces_ = [IEditEvents2]

class FollowFeatureAnnoConstructor(CoClass):
    u'An annotation feature constructor for creating annotation that follow the feature.'
    _reg_clsid_ = GUID('{857A8190-CBDC-4254-B93C-5C61B8D1A771}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
FollowFeatureAnnoConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationConstructor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class DimensionStyleDialog(CoClass):
    u'A property page for creating new dimension styles.'
    _reg_clsid_ = GUID('{19B5D741-A459-4461-B85F-BFF21990F8C9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IDimensionStyleDialog(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the dimension styles dialog.'
    _iid_ = GUID('{58DFE9F1-1DC0-438D-A6C1-5F0DDD1A9D10}')
    _idlflags_ = ['oleautomation']
DimensionStyleDialog._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionStyleDialog]

class IEditSelectionCache2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that cache the selection for fast hit testing.'
    _iid_ = GUID('{5B4165C1-F521-11D3-8278-0080C7E20671}')
    _idlflags_ = ['oleautomation']
class IEditor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the behavior of the editor.'
    _iid_ = GUID('{2866E6B0-C00B-11D0-802B-0000F8037368}')
    _idlflags_ = ['oleautomation']
IEditSelectionCache2._methods_ = [
    COMMETHOD([helpstring(u'Tests if the location is over the selection or not.')], HRESULT, 'HitTest',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'loc' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hit' )),
    COMMETHOD([helpstring(u"Initializes the cache using the editor's selection.")], HRESULT, 'Initialize',
              ( ['in'], POINTER(IEditor), 'Editor' ),
              ( ['in'], c_int, 'sizePixels' ),
              ( ['in'], VARIANT_BOOL, 'blockTopoFeatures' )),
]
################################################################
## code template for IEditSelectionCache2 implementation
##class IEditSelectionCache2_Impl(object):
##    def HitTest(self, loc):
##        u'Tests if the location is over the selection or not.'
##        #return hit
##
##    def Initialize(self, Editor, sizePixels, blockTopoFeatures):
##        u"Initializes the cache using the editor's selection."
##        #return 
##

class RightAngleConstructor(CoClass):
    u'Adds segments perpendicular to the sketch.'
    _reg_clsid_ = GUID('{7C0A009F-A1EF-47C2-8B6D-3D2EE3BB4EE7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IShapeConstructor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to a Shape Constructor to be hosted by tools that build sketches.'
    _iid_ = GUID('{14A69CAE-FEA8-4B8D-A5B4-03ECBEDD11B6}')
    _idlflags_ = ['oleautomation']
RightAngleConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

class IConstructionMiniBar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to controlling the construction minibar.'
    _iid_ = GUID('{5C3E4DA8-DCA5-4F6F-A659-F81C7A824D8C}')
    _idlflags_ = ['oleautomation']
IConstructionMiniBar._methods_ = [
    COMMETHOD([helpstring(u'Shows the construction minibar.')], HRESULT, 'Show',
              ( ['in'], c_int, 'xLoc' ),
              ( ['in'], c_int, 'yLoc' )),
    COMMETHOD([helpstring(u'Hides the construction minibar.')], HRESULT, 'Hide'),
    COMMETHOD(['propget', helpstring(u'Indicates whether the construction minibar is visible.')], HRESULT, 'IsVisible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'vis' )),
    COMMETHOD([helpstring(u'Updates the coordinate display and adjusts the tranparency of the window.')], HRESULT, 'UpdateTransparency',
              ( ['in'], c_int, 'xLoc' ),
              ( ['in'], c_int, 'yLoc' )),
    COMMETHOD([helpstring(u'Processes keyboard input.')], HRESULT, 'ProcessKeyDown',
              ( ['in'], c_int, 'keyState' ),
              ( ['in'], c_int, 'shift' )),
    COMMETHOD(['propput', helpstring(u'Activate/Deactivate the Construction Minibar.')], HRESULT, 'Active',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
]
################################################################
## code template for IConstructionMiniBar implementation
##class IConstructionMiniBar_Impl(object):
##    def UpdateTransparency(self, xLoc, yLoc):
##        u'Updates the coordinate display and adjusts the tranparency of the window.'
##        #return 
##
##    def Hide(self):
##        u'Hides the construction minibar.'
##        #return 
##
##    def Show(self, xLoc, yLoc):
##        u'Shows the construction minibar.'
##        #return 
##
##    @property
##    def IsVisible(self):
##        u'Indicates whether the construction minibar is visible.'
##        #return vis
##
##    def _set(self, rhs):
##        u'Activate/Deactivate the Construction Minibar.'
##    Active = property(fset = _set, doc = _set.__doc__)
##
##    def ProcessKeyDown(self, keyState, shift):
##        u'Processes keyboard input.'
##        #return 
##

class IDigitizerButtons(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to map digitizer puck buttons to ArcMap commands.'
    _iid_ = GUID('{D319724D-DB13-11D2-9F26-00C04F6BC979}')
    _idlflags_ = ['oleautomation']
IDigitizerButtons._methods_ = [
    COMMETHOD(['propput', helpstring(u'Button to map on the digitizer puck.')], HRESULT, 'Button',
              ( ['in'], c_int, 'Button' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'cmdID' )),
    COMMETHOD(['propget', helpstring(u'Button to map on the digitizer puck.')], HRESULT, 'Button',
              ( ['in'], c_int, 'Button' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID)), 'cmdID' )),
]
################################################################
## code template for IDigitizerButtons implementation
##class IDigitizerButtons_Impl(object):
##    def _get(self, Button):
##        u'Button to map on the digitizer puck.'
##        #return cmdID
##    def _set(self, Button, cmdID):
##        u'Button to map on the digitizer puck.'
##    Button = property(_get, _set, doc = _set.__doc__)
##

class IAttributeWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Attribute Window.'
    _iid_ = GUID('{98FCD927-5E92-47CB-83EF-3EF24B5D4C08}')
    _idlflags_ = ['oleautomation', 'hidden']
class IObjectInspector(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to members that control a custom feature's property inspector."
    _iid_ = GUID('{014EE841-A498-11D1-846B-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
IAttributeWindow._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if Attribute Window is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'vis' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Attribute Window is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'vis' )),
    COMMETHOD(['propget', helpstring(u'Current object attribute inspector.')], HRESULT, 'ObjectInspector',
              ( ['retval', 'out'], POINTER(POINTER(IObjectInspector)), 'inspector' )),
]
################################################################
## code template for IAttributeWindow implementation
##class IAttributeWindow_Impl(object):
##    def _get(self):
##        u'Indicates if Attribute Window is visible.'
##        #return vis
##    def _set(self, vis):
##        u'Indicates if Attribute Window is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ObjectInspector(self):
##        u'Current object attribute inspector.'
##        #return inspector
##

class TangentCurveConstructor(CoClass):
    u'Creates a circular arc segment, tangent to existing sketch.'
    _reg_clsid_ = GUID('{A8B845FD-2EE7-4D9B-80C6-F73982119B5E}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
TangentCurveConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

class CreateFeatureDockWin(CoClass):
    u'Esri create features window.'
    _reg_clsid_ = GUID('{EA61CE18-4B4F-4767-BA31-A11EC1C63DBB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IEditEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to editor events.  Implement it to listen for specific events that occur during an edit session.'
    _iid_ = GUID('{44276913-98C1-11D1-8464-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
CreateFeatureDockWin._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IDockableWindowDef, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IDockableWindowImageDef, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IDockableWindowInitialPlacement, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IActiveViewEvents, IEditEvents, IEditEvents2, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IAcceleratorHook]

class DimensionStyleImportDialog(CoClass):
    u'A dialog for importing dimension styles from on dimension feature class into another.'
    _reg_clsid_ = GUID('{41A037D4-CCFF-42D5-8C9A-7D2E3CC9F16F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IDimensionStyleImportDialog(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the dimension style import dialog.'
    _iid_ = GUID('{733466C0-3205-4C39-926D-B8D3D758FC1D}')
    _idlflags_ = ['oleautomation']
DimensionStyleImportDialog._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionStyleImportDialog]

class ICustomSnapping(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies a feature class extension that supports custom snapping.'
    _iid_ = GUID('{13959B00-1AA1-11D3-80CF-0080C7625171}')
    _idlflags_ = ['oleautomation']
ICustomSnapping._methods_ = [
]
################################################################
## code template for ICustomSnapping implementation
##class ICustomSnapping_Impl(object):


# values for enumeration 'esriSketchOperationType'
esriSketchOperationGeneral = 0
esriSketchOperationVertexAdded = 1
esriSketchOperationVertexDeleted = 2
esriSketchOperationVertexMoved = 3
esriSketchOperationType = c_int # enum
ISketchOperation2._methods_ = [
    COMMETHOD(['propput', helpstring(u'The text that appears in the undo menu choice.')], HRESULT, 'MenuString',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD([helpstring(u'Starts the operation, caching the existing sketch. Call this before modifying the sketch.')], HRESULT, 'Start',
              ( ['in'], POINTER(IEditor), 'Editor' )),
    COMMETHOD([helpstring(u'Finishes the operation and puts it into the operation stack. Call this after the sketch has been modified.')], HRESULT, 'Finish',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'invalEnv' ),
              ( ['in'], esriSketchOperationType, 'opType' ),
              ( ['in'], VARIANT, 'data' )),
]
################################################################
## code template for ISketchOperation2 implementation
##class ISketchOperation2_Impl(object):
##    def Start(self, Editor):
##        u'Starts the operation, caching the existing sketch. Call this before modifying the sketch.'
##        #return 
##
##    def Finish(self, invalEnv, opType, data):
##        u'Finishes the operation and puts it into the operation stack. Call this after the sketch has been modified.'
##        #return 
##
##    def _set(self, rhs):
##        u'The text that appears in the undo menu choice.'
##    MenuString = property(fset = _set, doc = _set.__doc__)
##

class IAttributeTransferType(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the behavior of the attribute transfer interfaces.'
    _iid_ = GUID('{9C610C6D-E4E5-40D3-831D-B87207EECCDC}')
    _idlflags_ = ['oleautomation']
class IAttributeTransfer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the behavior of the attribute transfer tools.'
    _iid_ = GUID('{4F0B9F27-487F-47E1-BCD9-1FC13AAE594A}')
    _idlflags_ = ['oleautomation']
IAttributeTransferType._methods_ = [
    COMMETHOD(['propget', helpstring(u'The current attribute type.')], HRESULT, 'AttributeTransfer',
              ( ['retval', 'out'], POINTER(POINTER(IAttributeTransfer)), 'ppAttributeTransfer' )),
    COMMETHOD(['propput', helpstring(u'The current attribute type.')], HRESULT, 'AttributeTransferType',
              ( ['in'], BSTR, 'rhs' )),
]
################################################################
## code template for IAttributeTransferType implementation
##class IAttributeTransferType_Impl(object):
##    @property
##    def AttributeTransfer(self):
##        u'The current attribute type.'
##        #return ppAttributeTransfer
##
##    def _set(self, rhs):
##        u'The current attribute type.'
##    AttributeTransferType = property(fset = _set, doc = _set.__doc__)
##

class IAnnotationConstructionWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the annotation construction window.'
    _iid_ = GUID('{DCECAC9D-979A-4D91-83A9-E1B9B92CCBA3}')
    _idlflags_ = ['oleautomation']
IAnnotationConstructionWindow._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether the annotation construction window is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the annotation construction window is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
]
################################################################
## code template for IAnnotationConstructionWindow implementation
##class IAnnotationConstructionWindow_Impl(object):
##    def _get(self):
##        u'Indicates whether the annotation construction window is visible.'
##        #return Visible
##    def _set(self, Visible):
##        u'Indicates whether the annotation construction window is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##

class SketchIntersectionCommand(CoClass):
    u'Initializes a new IntersectionConstructor on the Editor.'
    _reg_clsid_ = GUID('{B1C602D6-0DB3-453C-B516-7BCEBF7A82AD}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchIntersectionCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

class IEditSketch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that access and manipulate the edit sketch.'
    _iid_ = GUID('{6D3A6F67-9115-11D1-8461-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
class IEditSketch2(IEditSketch):
    _case_insensitive_ = True
    u'Provides access to members that access and manipulate the edit sketch.'
    _iid_ = GUID('{F8CF41AC-6F8A-4892-B0F7-2E0668B8CBA0}')
    _idlflags_ = ['oleautomation']
class IEditSketch3(IEditSketch2):
    _case_insensitive_ = True
    u'Provides access to members that access and manipulate the edit sketch.'
    _iid_ = GUID('{560640D2-81CB-4070-B73A-5F9E4D52DF00}')
    _idlflags_ = ['oleautomation']
IEditSketch._methods_ = [
    COMMETHOD(['propget', helpstring(u'The index of the current part of the sketch.')], HRESULT, 'Part',
              ( ['retval', 'out'], POINTER(c_int), 'Part' )),
    COMMETHOD(['propget', helpstring(u'The index of the current segment of the sketch.')], HRESULT, 'Segment',
              ( ['retval', 'out'], POINTER(c_int), 'Segment' )),
    COMMETHOD(['propget', helpstring(u'The index of the current vertex of the sketch.')], HRESULT, 'Vertex',
              ( ['retval', 'out'], POINTER(c_int), 'Vertex' )),
    COMMETHOD(['propget', helpstring(u'Type of the geometry stored in the edit sketch.')], HRESULT, 'GeometryType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'geomType' )),
    COMMETHOD(['propput', helpstring(u'Type of the geometry stored in the edit sketch.')], HRESULT, 'GeometryType',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'geomType' )),
    COMMETHOD(['propget', helpstring(u'Geometry stored in the edit sketch.')], HRESULT, 'Geometry',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'Geometry' )),
    COMMETHOD(['propputref', helpstring(u'Geometry stored in the edit sketch.')], HRESULT, 'Geometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' )),
    COMMETHOD([helpstring(u'Adds a point to the edit sketch. If allowUndo is true, a new operation will be created.')], HRESULT, 'AddPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['in'], VARIANT_BOOL, 'allowUndo' )),
    COMMETHOD([helpstring(u'Invalidates the portion of the display that is occupied by the sketch.')], HRESULT, 'RefreshSketch'),
    COMMETHOD([helpstring(u'Completes the current edit sketch.')], HRESULT, 'FinishSketch'),
    COMMETHOD([helpstring(u'Completes a part for the current edit sketch.')], HRESULT, 'FinishSketchPart'),
    COMMETHOD(['propget', helpstring(u'The last point in the edit sketch.')], HRESULT, 'LastPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD([helpstring(u'Call to notify listeners that the sketch has been changed.')], HRESULT, 'ModifySketch'),
]
################################################################
## code template for IEditSketch implementation
##class IEditSketch_Impl(object):
##    def AddPoint(self, point, allowUndo):
##        u'Adds a point to the edit sketch. If allowUndo is true, a new operation will be created.'
##        #return 
##
##    def FinishSketch(self):
##        u'Completes the current edit sketch.'
##        #return 
##
##    def Geometry(self, Geometry):
##        u'Geometry stored in the edit sketch.'
##        #return 
##
##    def RefreshSketch(self):
##        u'Invalidates the portion of the display that is occupied by the sketch.'
##        #return 
##
##    @property
##    def LastPoint(self):
##        u'The last point in the edit sketch.'
##        #return point
##
##    @property
##    def Vertex(self):
##        u'The index of the current vertex of the sketch.'
##        #return Vertex
##
##    @property
##    def Part(self):
##        u'The index of the current part of the sketch.'
##        #return Part
##
##    def _get(self):
##        u'Type of the geometry stored in the edit sketch.'
##        #return geomType
##    def _set(self, geomType):
##        u'Type of the geometry stored in the edit sketch.'
##    GeometryType = property(_get, _set, doc = _set.__doc__)
##
##    def ModifySketch(self):
##        u'Call to notify listeners that the sketch has been changed.'
##        #return 
##
##    @property
##    def Segment(self):
##        u'The index of the current segment of the sketch.'
##        #return Segment
##
##    def FinishSketchPart(self):
##        u'Completes a part for the current edit sketch.'
##        #return 
##

class IEditSketchExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that extend the edit sketch.'
    _iid_ = GUID('{CDFF8835-DEC8-433F-8EF7-5B754165D168}')
    _idlflags_ = ['oleautomation']
IEditSketch2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the edit sketch geometry will contain Zs.')], HRESULT, 'ZAware',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'aware' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the edit sketch geometry will contain Zs.')], HRESULT, 'ZAware',
              ( ['in'], VARIANT_BOOL, 'aware' )),
    COMMETHOD(['propget', helpstring(u'Current Z value for the edit sketch.')], HRESULT, 'CurrentZ',
              ( ['retval', 'out'], POINTER(c_double), 'z' )),
    COMMETHOD(['propput', helpstring(u'Current Z value for the edit sketch.')], HRESULT, 'CurrentZ',
              ( ['in'], c_double, 'z' )),
    COMMETHOD(['propputref', helpstring(u'The current edit sketch extension.')], HRESULT, 'EditSketchExtension',
              ( ['in'], POINTER(IEditSketchExtension), 'extension' )),
    COMMETHOD(['propget', helpstring(u'The current edit sketch extension.')], HRESULT, 'EditSketchExtension',
              ( ['retval', 'out'], POINTER(POINTER(IEditSketchExtension)), 'extension' )),
    COMMETHOD([helpstring(u'Call to notify listeners that a sketch vertex has been added.')], HRESULT, 'VertexAdded',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Call to notify listeners that a sketch vertex has been deleted.')], HRESULT, 'VertexDeleted',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Call to notify listeners that a sketch vertex has been moved.')], HRESULT, 'VertexMoved',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the edit sketch geometry will contain Ms.')], HRESULT, 'MAware',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'aware' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the edit sketch geometry will contain Ms.')], HRESULT, 'MAware',
              ( ['in'], VARIANT_BOOL, 'aware' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether FinishPart has been called on the edit sketch.')], HRESULT, 'PartComplete',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'complete' )),
]
################################################################
## code template for IEditSketch2 implementation
##class IEditSketch2_Impl(object):
##    def _get(self):
##        u'Indicates if the edit sketch geometry will contain Ms.'
##        #return aware
##    def _set(self, aware):
##        u'Indicates if the edit sketch geometry will contain Ms.'
##    MAware = property(_get, _set, doc = _set.__doc__)
##
##    def VertexMoved(self, point):
##        u'Call to notify listeners that a sketch vertex has been moved.'
##        #return 
##
##    @property
##    def PartComplete(self):
##        u'Indicates whether FinishPart has been called on the edit sketch.'
##        #return complete
##
##    def _get(self):
##        u'Current Z value for the edit sketch.'
##        #return z
##    def _set(self, z):
##        u'Current Z value for the edit sketch.'
##    CurrentZ = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def EditSketchExtension(self, extension):
##        u'The current edit sketch extension.'
##        #return 
##
##    def VertexDeleted(self, point):
##        u'Call to notify listeners that a sketch vertex has been deleted.'
##        #return 
##
##    def VertexAdded(self, point):
##        u'Call to notify listeners that a sketch vertex has been added.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the edit sketch geometry will contain Zs.'
##        #return aware
##    def _set(self, aware):
##        u'Indicates if the edit sketch geometry will contain Zs.'
##    ZAware = property(_get, _set, doc = _set.__doc__)
##

IEditSketch3._methods_ = [
    COMMETHOD([helpstring(u'Is a vertex selected.')], HRESULT, 'IsVertexSelected',
              ( ['in'], c_int, 'Part' ),
              ( ['in'], c_int, 'Vertex' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pbSelected' )),
    COMMETHOD([helpstring(u'Clears selected vertices.')], HRESULT, 'ClearSelectedVertices'),
    COMMETHOD([helpstring(u'Selects a vertex.')], HRESULT, 'SelectVertex',
              ( ['in'], c_int, 'Part' ),
              ( ['in'], c_int, 'Vertex' )),
    COMMETHOD([helpstring(u'Unselects a vertex.')], HRESULT, 'UnselectVertex',
              ( ['in'], c_int, 'Part' ),
              ( ['in'], c_int, 'Vertex' )),
    COMMETHOD(['propget', helpstring(u'The number of selected vertices.')], HRESULT, 'SelectedVertexCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'The WYSIWYG Sketch symbol and its properties.')], HRESULT, 'SetWYSIWYGSketchSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'symbol' ),
              ( ['in'], VARIANT_BOOL, 'isWYSIWYG' ),
              ( ['in'], VARIANT_BOOL, 'respectsRefScale' )),
    COMMETHOD([helpstring(u'Clears the WYSIWYG Sketch symbol and its properties.')], HRESULT, 'ClearWYSIWYGSketchSymbol'),
    COMMETHOD(['propget', helpstring(u'The WYSIWYG symbol for the sketch.')], HRESULT, 'WYSIWYGSketchSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'symbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the sketch symbol is WYSIWYG.')], HRESULT, 'SketchSymbolIsWYSIWYG',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isWYSIWYG' )),
    COMMETHOD(['propget', helpstring(u"Indicates whether the sketch symbol should respect the map's reference scale.")], HRESULT, 'SketchSymbolRespectsRefScale',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'respectsRefScale' )),
    COMMETHOD(['propget', helpstring(u'The currently activated Shape Constructor.')], HRESULT, 'ShapeConstructor',
              ( ['retval', 'out'], POINTER(POINTER(IShapeConstructor)), 'ShapeConstructor' )),
    COMMETHOD(['propputref', helpstring(u'The currently activated Shape Constructor.')], HRESULT, 'ShapeConstructor',
              ( ['in'], POINTER(IShapeConstructor), 'ShapeConstructor' )),
]
################################################################
## code template for IEditSketch3 implementation
##class IEditSketch3_Impl(object):
##    @property
##    def SketchSymbolIsWYSIWYG(self):
##        u'Indicates whether the sketch symbol is WYSIWYG.'
##        #return isWYSIWYG
##
##    @property
##    def SketchSymbolRespectsRefScale(self):
##        u"Indicates whether the sketch symbol should respect the map's reference scale."
##        #return respectsRefScale
##
##    def IsVertexSelected(self, Part, Vertex):
##        u'Is a vertex selected.'
##        #return pbSelected
##
##    def SetWYSIWYGSketchSymbol(self, symbol, isWYSIWYG, respectsRefScale):
##        u'The WYSIWYG Sketch symbol and its properties.'
##        #return 
##
##    @property
##    def WYSIWYGSketchSymbol(self):
##        u'The WYSIWYG symbol for the sketch.'
##        #return symbol
##
##    def ClearWYSIWYGSketchSymbol(self):
##        u'Clears the WYSIWYG Sketch symbol and its properties.'
##        #return 
##
##    def UnselectVertex(self, Part, Vertex):
##        u'Unselects a vertex.'
##        #return 
##
##    def ClearSelectedVertices(self):
##        u'Clears selected vertices.'
##        #return 
##
##    @property
##    def SelectedVertexCount(self):
##        u'The number of selected vertices.'
##        #return Count
##
##    def SelectVertex(self, Part, Vertex):
##        u'Selects a vertex.'
##        #return 
##
##    def ShapeConstructor(self, ShapeConstructor):
##        u'The currently activated Shape Constructor.'
##        #return 
##

class TemplateGeneralPropertyPage(CoClass):
    u'The General Property Page for an Edit Template.'
    _reg_clsid_ = GUID('{413E8671-4E22-4AFC-B168-2B59D3A575C6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
TemplateGeneralPropertyPage._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]

class RepresentationInspector(CoClass):
    u'A property inspector for features containing representations.'
    _reg_clsid_ = GUID('{1FDD54C6-E6FD-41FF-AEB5-7695DA123088}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
RepresentationInspector._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IObjectInspector]


# values for enumeration 'esriConstructionToolbarLocation'
esriCTLLast = 0
esriCTLOnTop = 1
esriCTLAbove = 2
esriCTLBelow = 3
esriConstructionToolbarLocation = c_int # enum
class ISketchPropertiesWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Sketch Properties Window.'
    _iid_ = GUID('{AD8D0486-C828-41B0-8858-361FB35BFA83}')
    _idlflags_ = ['oleautomation', 'hidden']
ISketchPropertiesWindow._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if Sketch Properties Window is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'vis' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Sketch Properties Window is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'vis' )),
]
################################################################
## code template for ISketchPropertiesWindow implementation
##class ISketchPropertiesWindow_Impl(object):
##    def _get(self):
##        u'Indicates if Sketch Properties Window is visible.'
##        #return vis
##    def _set(self, vis):
##        u'Indicates if Sketch Properties Window is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##

class IEditTaskSearch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that find edit tasks by name.'
    _iid_ = GUID('{B8D14DE9-0CF7-4695-BA44-0F9AA9C3F93E}')
    _idlflags_ = ['oleautomation']
class IEditTask(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to a task that receives notification when the sketch is complete.'
    _iid_ = GUID('{6D3A6F62-9115-11D1-8461-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
IEditTaskSearch._methods_ = [
    COMMETHOD(['propget', helpstring(u'An edit task by unique name.')], HRESULT, 'TaskByUniqueName',
              ( ['in'], BSTR, 'UniqueName' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditTask)), 'Task' )),
]
################################################################
## code template for IEditTaskSearch implementation
##class IEditTaskSearch_Impl(object):
##    @property
##    def TaskByUniqueName(self, UniqueName):
##        u'An edit task by unique name.'
##        #return Task
##

class DigitizerExtension(CoClass):
    u'Extension for working with the digitizer.'
    _reg_clsid_ = GUID('{58122E60-D89C-11D2-9F25-00C04F6BC979}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IDigitizerSetup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define the transformation used by the digitizer.'
    _iid_ = GUID('{D319724C-DB13-11D2-9F26-00C04F6BC979}')
    _idlflags_ = ['oleautomation']
DigitizerExtension._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension, IDigitizerSetup, IDigitizerButtons]

class ConstructionMiniBar(CoClass):
    u'An editor extension for working with the feature construction mini toobar'
    _reg_clsid_ = GUID('{6CE1AEA7-2C0B-4451-B7C2-6E8EDE7E2745}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IConstructionMiniBar2(IConstructionMiniBar):
    _case_insensitive_ = True
    u'Provides access to controlling the construction minibar.'
    _iid_ = GUID('{283251F5-AE90-40FC-BB41-F988C10BBADA}')
    _idlflags_ = ['oleautomation']
ConstructionMiniBar._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension, IConstructionMiniBar, IConstructionMiniBar2]

class IEnumRow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that enumerate rows in sequence.'
    _iid_ = GUID('{014EE840-A498-11D1-846B-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
IObjectInspector._methods_ = [
    COMMETHOD(['propget', helpstring(u'The window handle for the inspector.')], HRESULT, 'HWND',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'HWND' )),
    COMMETHOD([helpstring(u'Inspects the properties of the features.')], HRESULT, 'Inspect',
              ( ['in'], POINTER(IEnumRow), 'objects' ),
              ( ['in'], POINTER(IEditor), 'Editor' )),
    COMMETHOD([helpstring(u'Clear the inspector before inspecting another object.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring(u'Copies the values from srcRow to the row being edited.')], HRESULT, 'Copy',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow), 'srcRow' )),
]
################################################################
## code template for IObjectInspector implementation
##class IObjectInspector_Impl(object):
##    @property
##    def HWND(self):
##        u'The window handle for the inspector.'
##        #return HWND
##
##    def Clear(self):
##        u'Clear the inspector before inspecting another object.'
##        #return 
##
##    def Inspect(self, objects, Editor):
##        u'Inspects the properties of the features.'
##        #return 
##
##    def Copy(self, srcRow):
##        u'Copies the values from srcRow to the row being edited.'
##        #return 
##

class IDimensionConstructor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the dimension feature edit sketch constructor.'
    _iid_ = GUID('{3099C3CE-6630-4065-92B0-9009EAAB1303}')
    _idlflags_ = ['oleautomation']
class IDimensionEditExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control dimension feature editing.'
    _iid_ = GUID('{1FF3AFED-EE05-11D3-9F7A-00C04F6BDDD9}')
    _idlflags_ = ['oleautomation']
IDimensionConstructor._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the dimension constructor.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The type of geometry used for the edit sketch constructor.')], HRESULT, 'SketchGeometryType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'sketchType' )),
    COMMETHOD(['propget', helpstring(u'The type of dimension created with the dimension constructor.')], HRESULT, 'DimensionType',
              ( ['retval', 'out'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.esriDimensionType), 'DimensionType' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the dimension feature can be constructed given the number of points in the edit sketch.')], HRESULT, 'CanFinish',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'sketchGeometry' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanFinish' )),
    COMMETHOD([helpstring(u'Creates the dimension shape for a dimension feature given the geometry constructed in the dimension constructor.')], HRESULT, 'ConstructDimension',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IDimensionFeature), 'feature' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IDimensionStyle), 'style' )),
    COMMETHOD([helpstring(u'The dimension editor extension.')], HRESULT, 'Startup',
              ( ['in'], POINTER(IDimensionEditExtension), 'extension' )),
    COMMETHOD([helpstring(u'The constructor start event.')], HRESULT, 'Shutdown'),
    COMMETHOD([helpstring(u'The display feedback for the constructor.')], HRESULT, 'CreateFeedback',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFeedback)), 'feedback' )),
    COMMETHOD([helpstring(u'Starts the display feedback for the dimension constructor.')], HRESULT, 'StartFeedback',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IDimensionStyle), 'style' )),
    COMMETHOD([helpstring(u'Adds a point to the display feedback.')], HRESULT, 'AddFeedbackPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Stops the display feedback.')], HRESULT, 'StopFeedback'),
    COMMETHOD(['propget', helpstring(u'Indicates if the constructor will use a custom feedback.')], HRESULT, 'HasFeedback',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasFeedback' )),
    COMMETHOD([helpstring(u'Starts the display feedback for the dimension constructor from an existing geometry.')], HRESULT, 'StartFeedbackFromShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'shape' ),
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IDimensionStyle), 'style' )),
]
################################################################
## code template for IDimensionConstructor implementation
##class IDimensionConstructor_Impl(object):
##    @property
##    def Name(self):
##        u'Name of the dimension constructor.'
##        #return Name
##
##    @property
##    def CanFinish(self, sketchGeometry):
##        u'Indicates if the dimension feature can be constructed given the number of points in the edit sketch.'
##        #return CanFinish
##
##    def CreateFeedback(self):
##        u'The display feedback for the constructor.'
##        #return feedback
##
##    def StartFeedback(self, point, style):
##        u'Starts the display feedback for the dimension constructor.'
##        #return 
##
##    def AddFeedbackPoint(self, point):
##        u'Adds a point to the display feedback.'
##        #return 
##
##    def Startup(self, extension):
##        u'The dimension editor extension.'
##        #return 
##
##    @property
##    def DimensionType(self):
##        u'The type of dimension created with the dimension constructor.'
##        #return DimensionType
##
##    def ConstructDimension(self, feature, Geometry, style):
##        u'Creates the dimension shape for a dimension feature given the geometry constructed in the dimension constructor.'
##        #return 
##
##    def StartFeedbackFromShape(self, shape, style):
##        u'Starts the display feedback for the dimension constructor from an existing geometry.'
##        #return 
##
##    @property
##    def HasFeedback(self):
##        u'Indicates if the constructor will use a custom feedback.'
##        #return HasFeedback
##
##    def Shutdown(self):
##        u'The constructor start event.'
##        #return 
##
##    def StopFeedback(self):
##        u'Stops the display feedback.'
##        #return 
##
##    @property
##    def SketchGeometryType(self):
##        u'The type of geometry used for the edit sketch constructor.'
##        #return sketchType
##

class ICreateFeatureTask(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies an edit task for creating features.'
    _iid_ = GUID('{1D4A9127-5891-467D-8004-B233FA51A2F3}')
    _idlflags_ = ['oleautomation']
ICreateFeatureTask._methods_ = [
]
################################################################
## code template for ICreateFeatureTask implementation
##class ICreateFeatureTask_Impl(object):

class IRepresentationRuleEditor2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Representation Rule Editor.'
    _iid_ = GUID('{E409D577-9B47-49B6-8DC8-EB20BF1426F1}')
    _idlflags_ = ['oleautomation']
IRepresentationRuleEditor2._methods_ = [
    COMMETHOD([helpstring(u'Displays the representation rule editor dialog.')], HRESULT, 'DoModal',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'parentWnd' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'FeatureClass' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IRepresentationRule), 'Rule' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ok' )),
]
################################################################
## code template for IRepresentationRuleEditor2 implementation
##class IRepresentationRuleEditor2_Impl(object):
##    def DoModal(self, parentWnd, FeatureClass, Rule):
##        u'Displays the representation rule editor dialog.'
##        #return ok
##


# values for enumeration 'esriSketchConstraint'
esriConstraintNone = 0
esriConstraintAngle = 1
esriConstraintDistance = 2
esriSketchConstraint = c_int # enum
class EditEvents3(CoClass):
    u'Helper coclass for working with the nondefault outbound IEditEvents3 interface in VB.'
    _reg_clsid_ = GUID('{73C185F1-4989-4A9F-9E46-736C8A9E8AC9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IEditEvents3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to more editor events.  Implement it to listen for specific events that occur during an edit session.'
    _iid_ = GUID('{C922EA53-634F-4042-9BBE-D1A485E7D265}')
    _idlflags_ = ['oleautomation']
EditEvents3._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
EditEvents3._outgoing_interfaces_ = [IEditEvents3]

class IEnumDimensionConstructor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the dimension constructors.'
    _iid_ = GUID('{56F0A5D1-0367-412B-876A-6FD06D1F058F}')
    _idlflags_ = ['oleautomation']
IDimensionEditExtension._methods_ = [
    COMMETHOD(['propget', helpstring(u'The style id of newly created dimension features.')], HRESULT, 'CreateStyleID',
              ( ['retval', 'out'], POINTER(c_int), 'StyleID' )),
    COMMETHOD(['propput', helpstring(u'The style id of newly created dimension features.')], HRESULT, 'CreateStyleID',
              ( ['in'], c_int, 'StyleID' )),
    COMMETHOD(['propget', helpstring(u'The dimension constructors for creating new dimensions.')], HRESULT, 'DimensionConstructors',
              ( ['retval', 'out'], POINTER(POINTER(IEnumDimensionConstructor)), 'constructors' )),
    COMMETHOD(['propputref', helpstring(u'The currently selected dimension constructor.')], HRESULT, 'CurrentConstructor',
              ( ['in'], POINTER(IDimensionConstructor), 'rhs' )),
    COMMETHOD(['propget', helpstring(u'Indicates if a dimension feature class is the current editor target.')], HRESULT, 'IsDimensionTarget',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isDimension' )),
    COMMETHOD(['propget', helpstring(u'The editor application extension.')], HRESULT, 'Editor',
              ( ['retval', 'out'], POINTER(POINTER(IEditor)), 'Editor' )),
]
################################################################
## code template for IDimensionEditExtension implementation
##class IDimensionEditExtension_Impl(object):
##    @property
##    def Editor(self):
##        u'The editor application extension.'
##        #return Editor
##
##    def _get(self):
##        u'The style id of newly created dimension features.'
##        #return StyleID
##    def _set(self, StyleID):
##        u'The style id of newly created dimension features.'
##    CreateStyleID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsDimensionTarget(self):
##        u'Indicates if a dimension feature class is the current editor target.'
##        #return isDimension
##
##    @property
##    def DimensionConstructors(self):
##        u'The dimension constructors for creating new dimensions.'
##        #return constructors
##
##    def CurrentConstructor(self, rhs):
##        u'The currently selected dimension constructor.'
##        #return 
##

class EditSelectionCache(CoClass):
    u'Caches the selection for fast hit testing.'
    _reg_clsid_ = GUID('{6B998EAE-871B-11D3-9F4F-00C04F6BC979}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IEditSelectionCache(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that cache the selection for fast hit testing.'
    _iid_ = GUID('{6B998EAF-871B-11D3-9F4F-00C04F6BC979}')
    _idlflags_ = ['oleautomation']
class IEditSelectionCache3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to additional members that cache the selection for fast hit testing.'
    _iid_ = GUID('{C92EEB31-31EC-4220-B030-F55FE7D2E6EE}')
    _idlflags_ = ['oleautomation']
EditSelectionCache._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IEditSelectionCache, IEditSelectionCache2, IEditSelectionCache3, IEditEvents]

class IEditor2(IEditor):
    _case_insensitive_ = True
    u'Provides access to methods that extend the IEditor interface. The additional members control the behavior of the auxiliary selection anchor.'
    _iid_ = GUID('{7FA2AABD-A885-4F52-B538-969E8B464CBC}')
    _idlflags_ = ['oleautomation']
class IEditor3(IEditor2):
    _case_insensitive_ = True
    u'Provides access to methods that extend the IEditor interface. The additional members control the behavior of the template construction and snapping.'
    _iid_ = GUID('{C207EF01-F8B2-405B-A12A-EC94505090BB}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriEditState'
esriStateNotEditing = 0
esriStateEditing = 1
esriStateEditingUnfocused = 2
esriEditState = c_int # enum
IEditor._methods_ = [
    COMMETHOD(['propget', helpstring(u'Reference to the parent application.')], HRESULT, 'Parent',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IApplication)), 'application' )),
    COMMETHOD(['propget', helpstring(u"The editor's current edit state.")], HRESULT, 'EditState',
              ( ['retval', 'out'], POINTER(esriEditState), 'EditState' )),
    COMMETHOD(['propget', helpstring(u'Reference to the map being edited.')], HRESULT, 'Map',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IMap)), 'Map' )),
    COMMETHOD(['propget', helpstring(u'Reference to the current display.')], HRESULT, 'Display',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IScreenDisplay)), 'Display' )),
    COMMETHOD(['propget', helpstring(u'Reference to the workspace being edited.')], HRESULT, 'EditWorkspace',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace)), 'EditWorkspace' )),
    COMMETHOD(['propget', helpstring(u"Reference to the editor's scratch workspace.")], HRESULT, 'ScratchWorkspace',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace)), 'EditWorkspace' )),
    COMMETHOD([helpstring(u'Starts an edit session.')], HRESULT, 'StartEditing',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IWorkspace), 'workspace' )),
    COMMETHOD([helpstring(u'Stops an edit session.')], HRESULT, 'StopEditing',
              ( ['in'], VARIANT_BOOL, 'saveChanges' )),
    COMMETHOD([helpstring(u'Indicates whether edits have been made during the session.')], HRESULT, 'HasEdits',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasEdits' )),
    COMMETHOD([helpstring(u'Starts an edit operation.')], HRESULT, 'StartOperation'),
    COMMETHOD([helpstring(u'Aborts an edit operation.')], HRESULT, 'AbortOperation'),
    COMMETHOD([helpstring(u'Stops an edit operation.')], HRESULT, 'StopOperation',
              ( ['in'], BSTR, 'menuText' )),
    COMMETHOD([helpstring(u'Undo an edit operation.')], HRESULT, 'UndoOperation'),
    COMMETHOD([helpstring(u'Redo an edit operation.')], HRESULT, 'RedoOperation'),
    COMMETHOD([helpstring(u'Enable/disable the undo/redo capabilities.')], HRESULT, 'EnableUndoRedo',
              ( ['in'], VARIANT_BOOL, 'Enabled' )),
    COMMETHOD([helpstring(u'Used to batch operations together and minimize notifications.')], HRESULT, 'DelayEvents',
              ( ['in'], VARIANT_BOOL, 'delay' )),
    COMMETHOD(['propget', helpstring(u'The selected features which are editable.')], HRESULT, 'EditSelection',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumFeature)), 'selection' )),
    COMMETHOD(['propget', helpstring(u'The number of selected features which are editable.')], HRESULT, 'SelectionCount',
              ( ['retval', 'out'], POINTER(c_int), 'selection' )),
    COMMETHOD([helpstring(u'Finds the extension given an id.')], HRESULT, 'FindExtension',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IUID), 'extensionID' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension)), 'extension' )),
    COMMETHOD(['propget', helpstring(u'The number of edit tasks.')], HRESULT, 'TaskCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'An edit task by index.')], HRESULT, 'Task',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(IEditTask)), 'Task' )),
    COMMETHOD(['propputref', helpstring(u'The current edit task.')], HRESULT, 'CurrentTask',
              ( ['in'], POINTER(IEditTask), 'Task' )),
    COMMETHOD(['propget', helpstring(u'The current edit task.')], HRESULT, 'CurrentTask',
              ( ['retval', 'out'], POINTER(POINTER(IEditTask)), 'Task' )),
    COMMETHOD([helpstring(u'Creates a geometry using the point and the current search tolerance.')], HRESULT, 'CreateSearchShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'shape' )),
    COMMETHOD([helpstring(u'Searches the edit selection using the given location.')], HRESULT, 'SearchSelection',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumFeature)), 'features' )),
    COMMETHOD([helpstring(u"Draws the editor's snapping agent.")], HRESULT, 'InvertAgent',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'loc' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hdc' )),
    COMMETHOD(['propget', helpstring(u'The selection anchor point.')], HRESULT, 'SelectionAnchor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IAnchorPoint)), 'selAnchor' )),
    COMMETHOD(['propget', helpstring(u'The last known location of the mouse.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'loc' )),
]
################################################################
## code template for IEditor implementation
##class IEditor_Impl(object):
##    def StopOperation(self, menuText):
##        u'Stops an edit operation.'
##        #return 
##
##    def EnableUndoRedo(self, Enabled):
##        u'Enable/disable the undo/redo capabilities.'
##        #return 
##
##    @property
##    def Task(self, index):
##        u'An edit task by index.'
##        #return Task
##
##    def DelayEvents(self, delay):
##        u'Used to batch operations together and minimize notifications.'
##        #return 
##
##    def StartOperation(self):
##        u'Starts an edit operation.'
##        #return 
##
##    @property
##    def Map(self):
##        u'Reference to the map being edited.'
##        #return Map
##
##    @property
##    def Parent(self):
##        u'Reference to the parent application.'
##        #return application
##
##    @property
##    def EditState(self):
##        u"The editor's current edit state."
##        #return EditState
##
##    @property
##    def CurrentTask(self, Task):
##        u'The current edit task.'
##        #return 
##
##    @property
##    def SelectionCount(self):
##        u'The number of selected features which are editable.'
##        #return selection
##
##    @property
##    def EditSelection(self):
##        u'The selected features which are editable.'
##        #return selection
##
##    def InvertAgent(self, loc, hdc):
##        u"Draws the editor's snapping agent."
##        #return 
##
##    @property
##    def ScratchWorkspace(self):
##        u"Reference to the editor's scratch workspace."
##        #return EditWorkspace
##
##    def AbortOperation(self):
##        u'Aborts an edit operation.'
##        #return 
##
##    def HasEdits(self):
##        u'Indicates whether edits have been made during the session.'
##        #return HasEdits
##
##    def SearchSelection(self, point):
##        u'Searches the edit selection using the given location.'
##        #return features
##
##    @property
##    def TaskCount(self):
##        u'The number of edit tasks.'
##        #return Count
##
##    def RedoOperation(self):
##        u'Redo an edit operation.'
##        #return 
##
##    def UndoOperation(self):
##        u'Undo an edit operation.'
##        #return 
##
##    @property
##    def Display(self):
##        u'Reference to the current display.'
##        #return Display
##
##    def StartEditing(self, workspace):
##        u'Starts an edit session.'
##        #return 
##
##    def StopEditing(self, saveChanges):
##        u'Stops an edit session.'
##        #return 
##
##    @property
##    def EditWorkspace(self):
##        u'Reference to the workspace being edited.'
##        #return EditWorkspace
##
##    def FindExtension(self, extensionID):
##        u'Finds the extension given an id.'
##        #return extension
##
##    @property
##    def SelectionAnchor(self):
##        u'The selection anchor point.'
##        #return selAnchor
##
##    def CreateSearchShape(self, point):
##        u'Creates a geometry using the point and the current search tolerance.'
##        #return shape
##
##    @property
##    def Location(self):
##        u'The last known location of the mouse.'
##        #return loc
##

IEditor2._methods_ = [
    COMMETHOD(['propget', helpstring(u'The auxiliary selection anchor.')], HRESULT, 'AuxiliarySelectionAnchor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IAnchorPoint)), 'auxSelAnchor' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the selection anchor is drawn.')], HRESULT, 'AuxiliarySelectionAnchorEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'auxSelAnchorEnabled' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the selection anchor is drawn.')], HRESULT, 'AuxiliarySelectionAnchorEnabled',
              ( ['in'], VARIANT_BOOL, 'auxSelAnchorEnabled' )),
    COMMETHOD([helpstring(u'Places the auxiliary selection anchor near the main anchor.')], HRESULT, 'ResetAuxiliarySelectionAnchorLocation'),
]
################################################################
## code template for IEditor2 implementation
##class IEditor2_Impl(object):
##    @property
##    def AuxiliarySelectionAnchor(self):
##        u'The auxiliary selection anchor.'
##        #return auxSelAnchor
##
##    def ResetAuxiliarySelectionAnchorLocation(self):
##        u'Places the auxiliary selection anchor near the main anchor.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the selection anchor is drawn.'
##        #return auxSelAnchorEnabled
##    def _set(self, auxSelAnchorEnabled):
##        u'Indicates whether the selection anchor is drawn.'
##    AuxiliarySelectionAnchorEnabled = property(_get, _set, doc = _set.__doc__)
##

IEditor3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of edit templates.')], HRESULT, 'TemplateCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The edit template for the specified index.')], HRESULT, 'Template',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IEditTemplate)), 'editTemplate' )),
    COMMETHOD([helpstring(u'Adds the specified edit template.  The template was created with the EditTemplateFactory.')], HRESULT, 'AddTemplates',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IArray), 'editTemplateArray' )),
    COMMETHOD([helpstring(u'Removes the specified edit template.')], HRESULT, 'RemoveTemplate',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IEditTemplate), 'editTemplate' )),
    COMMETHOD([helpstring(u'Removes all templates from the specified layer.')], HRESULT, 'RemoveAllTemplatesInLayer',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ILayer), 'layer' )),
    COMMETHOD([helpstring(u'Removes all templates from the specified map.')], HRESULT, 'RemoveAllTemplatesInMap',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IMap), 'Map' )),
    COMMETHOD(['propget', helpstring(u'The current edit template.')], HRESULT, 'CurrentTemplate',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IEditTemplate)), 'editTemplate' )),
    COMMETHOD(['propputref', helpstring(u'The current edit template.')], HRESULT, 'CurrentTemplate',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IEditTemplate), 'editTemplate' )),
    COMMETHOD([helpstring(u'Broadcasts the change to the rest of the system.')], HRESULT, 'TemplateModified',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IEditTemplate), 'editTemplate' )),
]
################################################################
## code template for IEditor3 implementation
##class IEditor3_Impl(object):
##    @property
##    def TemplateCount(self):
##        u'The number of edit templates.'
##        #return Count
##
##    def CurrentTemplate(self, editTemplate):
##        u'The current edit template.'
##        #return 
##
##    def RemoveTemplate(self, editTemplate):
##        u'Removes the specified edit template.'
##        #return 
##
##    def TemplateModified(self, editTemplate):
##        u'Broadcasts the change to the rest of the system.'
##        #return 
##
##    def AddTemplates(self, editTemplateArray):
##        u'Adds the specified edit template.  The template was created with the EditTemplateFactory.'
##        #return 
##
##    @property
##    def Template(self, index):
##        u'The edit template for the specified index.'
##        #return editTemplate
##
##    def RemoveAllTemplatesInLayer(self, layer):
##        u'Removes all templates from the specified layer.'
##        #return 
##
##    def RemoveAllTemplatesInMap(self, Map):
##        u'Removes all templates from the specified map.'
##        #return 
##

class ReshapeFeatureTool(CoClass):
    _reg_clsid_ = GUID('{1FABA815-4BAE-4EB6-8535-9415D912B833}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IShapeConstructorTool(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface for tools that utilize shape constructors.'
    _iid_ = GUID('{32DA1291-7BE1-4D75-963F-8AC38DC9B56B}')
    _idlflags_ = ['oleautomation']
ReshapeFeatureTool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ITool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand, IShapeConstructorTool]

class LineFeatureTool(CoClass):
    u'Tool that creates a new Polyline sketch geometry.'
    _reg_clsid_ = GUID('{AF2DBF8F-280E-44DB-8860-E399D0B30CF1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
LineFeatureTool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ITool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand, IShapeConstructorTool]

class SimpleAlignedConstructor(CoClass):
    u'A dimension feature constructor for creating aligned dimension features.'
    _reg_clsid_ = GUID('{DA6AE250-4C34-4E2C-B0E3-2175CF7F9391}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SimpleAlignedConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionConstructor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class SelectionResolutionChip(CoClass):
    u'An editor extension for resolving selection of multiple features.'
    _reg_clsid_ = GUID('{82A1DC69-8C93-41A3-8B07-4CD820D74D18}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class ISelectionResolutionChip(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Selection Resolution Chip.'
    _iid_ = GUID('{09E25C6F-7E04-4317-85DA-76C52ED5D523}')
    _idlflags_ = ['oleautomation']
SelectionResolutionChip._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension, ISelectionResolutionChip]

class FeatureInspector(CoClass):
    u'Default feature inspector for the Editor.'
    _reg_clsid_ = GUID('{6278B130-3858-11D2-84C7-0000F875B9C6}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IExtendedObjectInspector(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to additional members that control a custom feature's property inspector."
    _iid_ = GUID('{84A3FD64-54A6-44E7-8CB6-CBFAA8CE49AF}')
    _idlflags_ = ['oleautomation']
class IObjectInspectorPanel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the default object property inspector.'
    _iid_ = GUID('{606FD6E5-2F5A-4126-84A2-67C281E0DE8B}')
    _idlflags_ = ['oleautomation']
FeatureInspector._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IObjectInspector, IExtendedObjectInspector, IObjectInspectorPanel, comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IConnectionPointContainer, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassEvents]
FeatureInspector._outgoing_interfaces_ = [comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.ISelectionEvents]

class ConflictsWindow(CoClass):
    u'Window used to resolve versioning conflicts.'
    _reg_clsid_ = GUID('{11725780-F274-11D2-9F2B-00C04F6BC979}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IConflictsWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Conflicts Display Window.'
    _iid_ = GUID('{121A14E0-96B0-11D2-8526-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
class IConflictsWindow2(IConflictsWindow):
    _case_insensitive_ = True
    u'Provides access to Conflicts Display Window.'
    _iid_ = GUID('{903F0C5B-B203-48D9-A136-797934CAE895}')
    _idlflags_ = ['oleautomation']
class IConflictsWindow3(IConflictsWindow2):
    _case_insensitive_ = True
    u'Provides access to Conflicts Display Window.'
    _iid_ = GUID('{E6AED5EA-FA73-48DD-9535-AF890862A404}')
    _idlflags_ = ['oleautomation']
class IConflictDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Conflict display environment.'
    _iid_ = GUID('{121A14E1-96B0-11D2-8526-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
ConflictsWindow._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IConflictsWindow, IConflictsWindow2, IConflictsWindow3, IConflictDisplay, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension]

IDigitizerSetup._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The transformation used by the digitizer.')], HRESULT, 'Transformation',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation), 'transform' )),
    COMMETHOD(['propget', helpstring(u'The transformation used by the digitizer.')], HRESULT, 'Transformation',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ITransformation)), 'transform' )),
    COMMETHOD(['propget', helpstring(u'The number of control points used for digitizing.')], HRESULT, 'ControlPointCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Removes all control points.')], HRESULT, 'ClearControlPoints'),
    COMMETHOD([helpstring(u"A control point's X,Y coordinates in Digitizer and Map units.")], HRESULT, 'GetControlPoint',
              ( ['in'], c_int, 'index' ),
              ( ['out'], POINTER(c_double), 'xDigitizer' ),
              ( ['out'], POINTER(c_double), 'yDigitizer' ),
              ( ['out'], POINTER(c_double), 'xMap' ),
              ( ['out'], POINTER(c_double), 'yMap' )),
    COMMETHOD([helpstring(u'Adds a control point to the transformation.')], HRESULT, 'AddControlPoint',
              ( ['in'], c_double, 'xDigitizer' ),
              ( ['in'], c_double, 'yDigitizer' ),
              ( ['in'], c_double, 'xMap' ),
              ( ['in'], c_double, 'yMap' )),
]
################################################################
## code template for IDigitizerSetup implementation
##class IDigitizerSetup_Impl(object):
##    def GetControlPoint(self, index):
##        u"A control point's X,Y coordinates in Digitizer and Map units."
##        #return xDigitizer, yDigitizer, xMap, yMap
##
##    @property
##    def ControlPointCount(self):
##        u'The number of control points used for digitizing.'
##        #return Count
##
##    def AddControlPoint(self, xDigitizer, yDigitizer, xMap, yMap):
##        u'Adds a control point to the transformation.'
##        #return 
##
##    @property
##    def Transformation(self, transform):
##        u'The transformation used by the digitizer.'
##        #return 
##
##    def ClearControlPoints(self):
##        u'Removes all control points.'
##        #return 
##

class ISnapAgentFeedback(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to feedback in the form of a string to determine what was snapped to.'
    _iid_ = GUID('{475742FA-D9E2-4C41-BA2A-BA86D044CDC1}')
    _idlflags_ = ['oleautomation']
ISnapAgentFeedback._methods_ = [
    COMMETHOD(['propget', helpstring(u'Snap Agent Feedback string.')], HRESULT, 'SnapText',
              ( ['retval', 'out'], POINTER(BSTR), 'text' )),
]
################################################################
## code template for ISnapAgentFeedback implementation
##class ISnapAgentFeedback_Impl(object):
##    @property
##    def SnapText(self):
##        u'Snap Agent Feedback string.'
##        #return text
##

class IEnumAnnotationConstructor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation constructors.'
    _iid_ = GUID('{555F0C28-D598-4E22-8FD0-94D17518C0B3}')
    _idlflags_ = ['oleautomation']
IEnumAnnotationConstructor._methods_ = [
    COMMETHOD([helpstring(u'Resets the enumerator such that a subsequent next returns the first constructor.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'The next constructor in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IAnnotationConstructor)), 'Constructor' )),
]
################################################################
## code template for IEnumAnnotationConstructor implementation
##class IEnumAnnotationConstructor_Impl(object):
##    def Reset(self):
##        u'Resets the enumerator such that a subsequent next returns the first constructor.'
##        #return 
##
##    def Next(self):
##        u'The next constructor in the enumeration.'
##        #return Constructor
##

IEditEvents2._methods_ = [
    COMMETHOD([helpstring(u'Called when the CurrentZ changes.')], HRESULT, 'OnCurrentZChanged'),
    COMMETHOD([helpstring(u'Called after a vertex/point has been moved in the sketch.')], HRESULT, 'OnVertexMoved',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Called after a point/vertex is added to the sketch.')], HRESULT, 'OnVertexAdded',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Called after a point is deleted from the sketch.')], HRESULT, 'OnVertexDeleted',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Fired before StopEditing happens.')], HRESULT, 'BeforeStopEditing',
              ( ['in'], VARIANT_BOOL, 'save' )),
    COMMETHOD([helpstring(u'Called when AbortOperation is called.')], HRESULT, 'OnAbort'),
    COMMETHOD([helpstring(u'Called when StartOperation is called.')], HRESULT, 'OnStartOperation'),
    COMMETHOD([helpstring(u'Called before StopOperation is called.')], HRESULT, 'BeforeStopOperation'),
    COMMETHOD([helpstring(u'Called when StopOperation is called.')], HRESULT, 'OnStopOperation'),
    COMMETHOD([helpstring(u'Called when edits are saved.')], HRESULT, 'OnSaveEdits'),
]
################################################################
## code template for IEditEvents2 implementation
##class IEditEvents2_Impl(object):
##    def OnAbort(self):
##        u'Called when AbortOperation is called.'
##        #return 
##
##    def OnVertexDeleted(self, point):
##        u'Called after a point is deleted from the sketch.'
##        #return 
##
##    def OnStopOperation(self):
##        u'Called when StopOperation is called.'
##        #return 
##
##    def OnSaveEdits(self):
##        u'Called when edits are saved.'
##        #return 
##
##    def OnCurrentZChanged(self):
##        u'Called when the CurrentZ changes.'
##        #return 
##
##    def BeforeStopEditing(self, save):
##        u'Fired before StopEditing happens.'
##        #return 
##
##    def BeforeStopOperation(self):
##        u'Called before StopOperation is called.'
##        #return 
##
##    def OnStartOperation(self):
##        u'Called when StartOperation is called.'
##        #return 
##
##    def OnVertexAdded(self, point):
##        u'Called after a point/vertex is added to the sketch.'
##        #return 
##
##    def OnVertexMoved(self, point):
##        u'Called after a vertex/point has been moved in the sketch.'
##        #return 
##

class TraverseWindow(CoClass):
    u'Dialog for creating traverses.'
    _reg_clsid_ = GUID('{8C7128EB-7A6D-4E6F-BECB-55803443713D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class ITraverseWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that interact with the Traverse Window dialog.'
    _iid_ = GUID('{3FBA17C0-F4AE-406E-B028-1C96D9F789C5}')
    _idlflags_ = ['oleautomation']
class ITraverseWindow2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that interact with the Traverse Window dialog.'
    _iid_ = GUID('{A42FE698-4C65-4A7C-8408-8934CBF6CF39}')
    _idlflags_ = ['oleautomation']
class ITraverseWindowEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Traverse Window events. Implement it to listen to specific events that occur when the Traverse Window is used.'
    _iid_ = GUID('{E62F974F-D2BA-460D-BC8E-D6A94C793F77}')
    _idlflags_ = ['oleautomation', 'hidden']
TraverseWindow._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITraverseWindow, ITraverseWindow2, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension]
TraverseWindow._outgoing_interfaces_ = [ITraverseWindowEvents]

class ISnapAgent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that snap point locations using a tolerance.'
    _iid_ = GUID('{2866E6B3-C00B-11D0-802B-0000F8037368}')
    _idlflags_ = ['oleautomation']
ISnapAgent._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the snap agent shown in the UI.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([helpstring(u'Called by the editor to perform the actual snapping logic.')], HRESULT, 'Snap',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'geom' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['in'], c_double, 'tolerance' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'snapped' )),
]
################################################################
## code template for ISnapAgent implementation
##class ISnapAgent_Impl(object):
##    def Snap(self, geom, point, tolerance):
##        u'Called by the editor to perform the actual snapping logic.'
##        #return snapped
##
##    @property
##    def Name(self):
##        u'The name of the snap agent shown in the UI.'
##        #return Name
##

class FeatureSnap(CoClass):
    u'Snap agent that snaps to a feature in a specified way.'
    _reg_clsid_ = GUID('{5E81B7CA-CE16-11D0-802D-0000F8037368}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IFeatureSnapAgent(ISnapAgent):
    _case_insensitive_ = True
    u"Provides access to members that control a feature snap agent's properties."
    _iid_ = GUID('{2866E6B4-C00B-11D0-802B-0000F8037368}')
    _idlflags_ = ['oleautomation']
class IFeatureSnapAgent2(IFeatureSnapAgent):
    _case_insensitive_ = True
    u'Provides access to properties controlling Snapping in Z.'
    _iid_ = GUID('{7C41EF14-BC5F-4848-8A4D-9478FC492213}')
    _idlflags_ = ['oleautomation']
FeatureSnap._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IFeatureSnapAgent2, ISnapAgent, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension, ISnapAgentFeedback, IEditEvents, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassEvents]

class EditEvents4(CoClass):
    u'Helper coclass for working with the nondefault outbound IEditEvents4 interface in VB.'
    _reg_clsid_ = GUID('{15E11C03-26D1-40F1-BB40-EB49180DBC2E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IEditEvents4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to more editor events.  Implement it to listen for specific events that occur during an edit session.'
    _iid_ = GUID('{99C99D75-78AB-4473-AD87-38A3F0B30E04}')
    _idlflags_ = ['oleautomation']
EditEvents4._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown]
EditEvents4._outgoing_interfaces_ = [IEditEvents4]

class RepresentationMarkerEditor(CoClass):
    u'A dialog for editing a representation marker.'
    _reg_clsid_ = GUID('{559FF0CB-F800-4F91-BF41-F6FAF884F7A7}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IRepresentationMarkerEditor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Representation Marker Editor.'
    _iid_ = GUID('{F75DB28B-4C65-4674-8C04-1815C4420B2D}')
    _idlflags_ = ['oleautomation']
RepresentationMarkerEditor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRepresentationMarkerEditor]

class ITransmogrifyTask(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies an edit task for reshaping features.'
    _iid_ = GUID('{74EBB551-1733-11D3-B7C4-0000F878098D}')
    _idlflags_ = ['oleautomation']
ITransmogrifyTask._methods_ = [
]
################################################################
## code template for ITransmogrifyTask implementation
##class ITransmogrifyTask_Impl(object):

class FreeLinearConstructor(CoClass):
    u'A dimension feature constructor for creating linear dimension features.'
    _reg_clsid_ = GUID('{A0192A90-F100-4CF3-857E-89A2D7C94AC9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
FreeLinearConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionConstructor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IEnumDimensionConstructor._methods_ = [
    COMMETHOD([helpstring(u'Resets the enumerator such that a subsequent next returns the first constructor.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Retrieves the next constructor in the enumeration.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(IDimensionConstructor)), 'Constructor' )),
]
################################################################
## code template for IEnumDimensionConstructor implementation
##class IEnumDimensionConstructor_Impl(object):
##    def Reset(self):
##        u'Resets the enumerator such that a subsequent next returns the first constructor.'
##        #return 
##
##    def Next(self):
##        u'Retrieves the next constructor in the enumeration.'
##        #return Constructor
##

class DimensionInspector(CoClass):
    u'A property inspector for dimension features.'
    _reg_clsid_ = GUID('{C5326324-B7C2-421E-9280-119145CBDBA1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
DimensionInspector._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IObjectInspector, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassEvents]

class ArcConstructor(CoClass):
    u'Creates a circular arc segment.'
    _reg_clsid_ = GUID('{596F3328-CDB1-4380-B50F-3292B1217386}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
ArcConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

class RepresentationRulesPropertyPage(CoClass):
    u'A property page for modifying the collection of rules of a feature class representation.'
    _reg_clsid_ = GUID('{7CD6EF8C-7C5F-4051-920B-3B0BAACBE5CA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
RepresentationRulesPropertyPage._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IPropertyPage, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IPropertyPageContext, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IComPropertyPage2, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IComPropertyPage, comtypes.gen._D92377DC_FAB1_4DFB_A4C1_61BD8C40DBEB_0_10_2.IRendererPropertyPage]

class IEditLocation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to the Editor's Location property."
    _iid_ = GUID('{021D7FFF-9018-454A-9827-CFA428531DE6}')
    _idlflags_ = ['oleautomation']
IEditLocation._methods_ = [
    COMMETHOD(['propget', helpstring(u'The last known location of the mouse.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'loc' )),
    COMMETHOD(['propputref', helpstring(u'The last known location of the mouse.')], HRESULT, 'Location',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'loc' )),
]
################################################################
## code template for IEditLocation implementation
##class IEditLocation_Impl(object):
##    def Location(self, loc):
##        u'The last known location of the mouse.'
##        #return 
##

class RepresentationRuleEditor(CoClass):
    u'A dialog for editing a representation rule.'
    _reg_clsid_ = GUID('{FFBB9F91-EEA7-499B-80C6-868D2456DF82}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IRepresentationRuleEditor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the Representation Rule Editor.'
    _iid_ = GUID('{1EB35705-6646-47BA-86FB-6B2D5980DB78}')
    _idlflags_ = ['oleautomation']
RepresentationRuleEditor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IRepresentationRuleEditor, IRepresentationRuleEditor2]

class EditTool(CoClass):
    u'Editing tool which edits features.'
    _reg_clsid_ = GUID('{9EBF3A1E-D0C0-11D0-802D-0000F8037368}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IEditTool(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u"Provides access to events triggered by the ArcMap Editor's edit tool."
    _iid_ = GUID('{67AA1362-5276-4AEB-A08D-52D83D1CC80A}')
    _idlflags_ = ['oleautomation']
EditTool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IEditTool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ITool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

class Course(CoClass):
    u'Creates line segments defined by COGO descriptions.'
    _reg_clsid_ = GUID('{12A5D23E-E444-4439-982B-A4CA9A72C16C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class ICourse(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that define a course in a traverse.'
    _iid_ = GUID('{FC110CCF-4F67-4FA9-9C9E-065D913A3A09}')
    _idlflags_ = ['oleautomation']
Course._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ICourse]

class AttributeWindow(CoClass):
    u'Dialog for inspecting selected/editable features.'
    _reg_clsid_ = GUID('{9643DCBD-8C99-4D98-BCBE-977AC1D94373}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
AttributeWindow._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAttributeWindow, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension]
AttributeWindow._outgoing_interfaces_ = [IAttributeWindowEvents]

class IEditorZ(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that access and manipulate the z-environment of the editor.'
    _iid_ = GUID('{F697A79E-E55F-4A63-83A8-7676725D56A4}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'esriZCaptureType'
esriCaptureCurrentZ = 0
esriCaptureInterpolateZ = 1
esriCaptureSurfaceZ = 2
esriZCaptureType = c_int # enum
class INotifyZFinalize(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to a callback method the Editor will call if Z Attribution of a geometry fails.'
    _iid_ = GUID('{F526DCAB-C92A-4C27-B6AE-1DECF4456A0F}')
    _idlflags_ = ['oleautomation']
IEditorZ._methods_ = [
    COMMETHOD([helpstring(u"Drapes a geometry to the current surface.. If addVertices is false, existing vertex Z's will be modified but no new vertices added.")], HRESULT, 'DrapeGeometry',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['in'], VARIANT_BOOL, 'addVertices' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'outputGeometry' )),
    COMMETHOD([helpstring(u"Applies editor's Z-capture logic to point if it isn't already z-aware.")], HRESULT, 'ApplyZ',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Resolves NaN Zs to definite values.')], HRESULT, 'FinalizeZs',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' )),
    COMMETHOD(['propget', helpstring(u'Determines method used for z-capture.')], HRESULT, 'ZCaptureType',
              ( ['retval', 'out'], POINTER(esriZCaptureType), 'ZCaptureType' )),
    COMMETHOD(['propput', helpstring(u'Determines method used for z-capture.')], HRESULT, 'ZCaptureType',
              ( ['in'], esriZCaptureType, 'ZCaptureType' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether new z-values are modified by the ZOffset property.')], HRESULT, 'UseZOffset',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseZOffset' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether new z-values are modified by the ZOffset property.')], HRESULT, 'UseZOffset',
              ( ['in'], VARIANT_BOOL, 'UseZOffset' )),
    COMMETHOD(['propget', helpstring(u'Determines offset applied to z-value when new vertex is added to edit sketch.')], HRESULT, 'ZOffset',
              ( ['retval', 'out'], POINTER(c_double), 'ZOffset' )),
    COMMETHOD(['propput', helpstring(u'Determines offset applied to z-value when new vertex is added to edit sketch.')], HRESULT, 'ZOffset',
              ( ['in'], c_double, 'ZOffset' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the ZDrapingTolerance property is used when adding segments to the edit sketch.')], HRESULT, 'UseZDrapingTolerance',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseZDrapingTolerance' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the ZDrapingTolerance property is used when adding segments to the edit sketch.')], HRESULT, 'UseZDrapingTolerance',
              ( ['in'], VARIANT_BOOL, 'UseZDrapingTolerance' )),
    COMMETHOD(['propget', helpstring(u'Determines the allowable error from the surface when draping.')], HRESULT, 'ZDrapingTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'ZDrapingTolerance' )),
    COMMETHOD(['propput', helpstring(u'Determines the allowable error from the surface when draping.')], HRESULT, 'ZDrapingTolerance',
              ( ['in'], c_double, 'ZDrapingTolerance' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether sketches are draped onto the surface.')], HRESULT, 'Draping',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'useDraping' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether sketches are draped onto the surface.')], HRESULT, 'Draping',
              ( ['in'], VARIANT_BOOL, 'useDraping' )),
    COMMETHOD(['propget', helpstring(u'Surface used for Z capture.')], HRESULT, 'Surface',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IFunctionalSurface)), 'Surface' )),
    COMMETHOD(['propputref', helpstring(u'Surface used for Z capture.')], HRESULT, 'Surface',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IFunctionalSurface), 'Surface' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to indicate when vertex is snapped in Z.')], HRESULT, 'ZSnapSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'symbol' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to indicate when vertex is snapped in Z.')], HRESULT, 'ZSnapSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'symbol' )),
    COMMETHOD(['propget', helpstring(u'Callback used to notify if ZCapture mode fails.')], HRESULT, 'NotifyZFinalize',
              ( ['retval', 'out'], POINTER(POINTER(INotifyZFinalize)), 'callback' )),
    COMMETHOD(['propputref', helpstring(u'Callback used to notify if ZCapture mode fails.')], HRESULT, 'NotifyZFinalize',
              ( ['in'], POINTER(INotifyZFinalize), 'callback' )),
    COMMETHOD([helpstring(u"Initialize a FeatureConstruction object that will use the Editor's ZEnvironment settings.")], HRESULT, 'InitializeFeatureConstruction',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureConstruction)), 'ppFC' )),
]
################################################################
## code template for IEditorZ implementation
##class IEditorZ_Impl(object):
##    def _get(self):
##        u'Indicates whether sketches are draped onto the surface.'
##        #return useDraping
##    def _set(self, useDraping):
##        u'Indicates whether sketches are draped onto the surface.'
##    Draping = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether new z-values are modified by the ZOffset property.'
##        #return UseZOffset
##    def _set(self, UseZOffset):
##        u'Indicates whether new z-values are modified by the ZOffset property.'
##    UseZOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Determines offset applied to z-value when new vertex is added to edit sketch.'
##        #return ZOffset
##    def _set(self, ZOffset):
##        u'Determines offset applied to z-value when new vertex is added to edit sketch.'
##    ZOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the ZDrapingTolerance property is used when adding segments to the edit sketch.'
##        #return UseZDrapingTolerance
##    def _set(self, UseZDrapingTolerance):
##        u'Indicates whether the ZDrapingTolerance property is used when adding segments to the edit sketch.'
##    UseZDrapingTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def ApplyZ(self, point):
##        u"Applies editor's Z-capture logic to point if it isn't already z-aware."
##        #return 
##
##    def FinalizeZs(self, Geometry):
##        u'Resolves NaN Zs to definite values.'
##        #return 
##
##    def InitializeFeatureConstruction(self):
##        u"Initialize a FeatureConstruction object that will use the Editor's ZEnvironment settings."
##        #return ppFC
##
##    def Surface(self, Surface):
##        u'Surface used for Z capture.'
##        #return 
##
##    def _get(self):
##        u'Determines method used for z-capture.'
##        #return ZCaptureType
##    def _set(self, ZCaptureType):
##        u'Determines method used for z-capture.'
##    ZCaptureType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Determines the allowable error from the surface when draping.'
##        #return ZDrapingTolerance
##    def _set(self, ZDrapingTolerance):
##        u'Determines the allowable error from the surface when draping.'
##    ZDrapingTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def ZSnapSymbol(self, symbol):
##        u'Symbol used to indicate when vertex is snapped in Z.'
##        #return 
##
##    def NotifyZFinalize(self, callback):
##        u'Callback used to notify if ZCapture mode fails.'
##        #return 
##
##    def DrapeGeometry(self, Geometry, addVertices):
##        u"Drapes a geometry to the current surface.. If addVertices is false, existing vertex Z's will be modified but no new vertices added."
##        #return outputGeometry
##

class AnnotationInspector(CoClass):
    u'A property inspector for annotation features.'
    _reg_clsid_ = GUID('{984B7F57-0BF8-4F1C-8B0B-4C4757DFAD1C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
AnnotationInspector._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IObjectInspector, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClassEvents]

class AlignedConstructor(CoClass):
    u'A dimension feature constructor for creating aligned dimension features.'
    _reg_clsid_ = GUID('{9407BBE9-449C-46D5-A489-DAE8D27E4696}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
AlignedConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionConstructor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class RepresentationClassPropertyPage(CoClass):
    u'A property page for modifying the properties of a feature class representation.'
    _reg_clsid_ = GUID('{A010F369-D40C-4908-BBA3-ED22721F4630}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
RepresentationClassPropertyPage._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IPropertyPage, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IPropertyPageContext, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IComPropertyPage2, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IComPropertyPage]

class LinearConstructor(CoClass):
    u'A dimension feature constructor for creating linear dimension features.'
    _reg_clsid_ = GUID('{AD2D0FD2-DEF7-4017-A158-27804B0C9A74}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
LinearConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionConstructor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class EditSelection(CoClass):
    u'Enumerates the editable selected features.'
    _reg_clsid_ = GUID('{CA38EAC6-90D4-11D4-A698-00508B4A4114}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IEnumMapFeature(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the layer a selected feature is from.'
    _iid_ = GUID('{FA1B3B8E-3792-4BC1-BC2C-920D113D6A64}')
    _idlflags_ = ['oleautomation']
EditSelection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumFeature, IEnumMapFeature]

class IEditLayers(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control information about layers in the edit session.'
    _iid_ = GUID('{6CD39A83-B457-11D1-8470-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
IEditLayers._methods_ = [
    COMMETHOD([helpstring(u"The editor's target layer and subtype for new features.")], HRESULT, 'SetCurrentLayer',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IFeatureLayer), 'layer' ),
              ( ['in'], c_int, 'subtype' )),
    COMMETHOD(['propget', helpstring(u"Indicates the editor's target layer which new features are added to.")], HRESULT, 'CurrentLayer',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IFeatureLayer)), 'layer' )),
    COMMETHOD(['propget', helpstring(u'The sub type for new features in the CurrentLayer.')], HRESULT, 'CurrentSubtype',
              ( ['retval', 'out'], POINTER(c_int), 'typeCode' )),
    COMMETHOD([helpstring(u'Determines if a specific feature layer is editable.')], HRESULT, 'IsEditable',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IFeatureLayer), 'layer' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pEditable' )),
]
################################################################
## code template for IEditLayers implementation
##class IEditLayers_Impl(object):
##    @property
##    def CurrentSubtype(self):
##        u'The sub type for new features in the CurrentLayer.'
##        #return typeCode
##
##    def IsEditable(self, layer):
##        u'Determines if a specific feature layer is editable.'
##        #return pEditable
##
##    def SetCurrentLayer(self, layer, subtype):
##        u"The editor's target layer and subtype for new features."
##        #return 
##
##    @property
##    def CurrentLayer(self):
##        u"Indicates the editor's target layer which new features are added to."
##        #return layer
##

class RotatedLinearConstructor(CoClass):
    u'A dimension feature constructor for creating linear dimension features.'
    _reg_clsid_ = GUID('{922B5D7E-330B-4BD3-8C5B-58B84DF5722F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
RotatedLinearConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionConstructor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class ISelectionResolutionImpl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the callback methods for the Selection Resolution Chip.'
    _iid_ = GUID('{C7B0148F-0AC0-4124-A65F-36C8B09FB06A}')
    _idlflags_ = ['oleautomation']
ISelectionResolutionImpl._methods_ = [
    COMMETHOD([helpstring(u'A new feature has been selected.')], HRESULT, 'Select',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IFeatureLayer), 'newFeatureLayer' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'newFeature' ),
              ( ['in'], comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.esriSelectionResultEnum, 'selectionMethod' ),
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IFeatureLayer), 'lastFeatureLayer' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'lastFeature' )),
]
################################################################
## code template for ISelectionResolutionImpl implementation
##class ISelectionResolutionImpl_Impl(object):
##    def Select(self, newFeatureLayer, newFeature, selectionMethod, lastFeatureLayer, lastFeature):
##        u'A new feature has been selected.'
##        #return 
##

class IRepresentationWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods for working with the representation properties window.'
    _iid_ = GUID('{7788702E-5FFD-48B6-B2E9-DD2135D43B8F}')
    _idlflags_ = ['oleautomation']
IRepresentationWindow._methods_ = [
    COMMETHOD([helpstring(u'Shows the window.')], HRESULT, 'Show'),
    COMMETHOD([helpstring(u'Hides the window.')], HRESULT, 'Hide'),
    COMMETHOD([helpstring(u'Refreshes the contents.')], HRESULT, 'RefreshContents'),
]
################################################################
## code template for IRepresentationWindow implementation
##class IRepresentationWindow_Impl(object):
##    def RefreshContents(self):
##        u'Refreshes the contents.'
##        #return 
##
##    def Hide(self):
##        u'Hides the window.'
##        #return 
##
##    def Show(self):
##        u'Shows the window.'
##        #return 
##

IEditEvents3._methods_ = [
    COMMETHOD([helpstring(u'Called before the edit sketch is drawn.')], HRESULT, 'BeforeDrawSketch',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDpy' )),
]
################################################################
## code template for IEditEvents3 implementation
##class IEditEvents3_Impl(object):
##    def BeforeDrawSketch(self, pDpy):
##        u'Called before the edit sketch is drawn.'
##        #return 
##

IEditSelectionCache3._methods_ = [
    COMMETHOD([helpstring(u'Tests if the location is over the selection or not.')], HRESULT, 'HitTest',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'loc' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hit' )),
    COMMETHOD([helpstring(u"Initializes the cache using the editor's selection.")], HRESULT, 'Initialize',
              ( ['in'], POINTER(IEditor), 'Editor' ),
              ( ['in'], c_int, 'sizePixels' ),
              ( ['in'], VARIANT_BOOL, 'blockTopoFeatures' ),
              ( ['in'], VARIANT_BOOL, 'annoOnly' )),
]
################################################################
## code template for IEditSelectionCache3 implementation
##class IEditSelectionCache3_Impl(object):
##    def HitTest(self, loc):
##        u'Tests if the location is over the selection or not.'
##        #return hit
##
##    def Initialize(self, Editor, sizePixels, blockTopoFeatures, annoOnly):
##        u"Initializes the cache using the editor's selection."
##        #return 
##

IEditEvents4._methods_ = [
    COMMETHOD([helpstring(u'Called when Ground to Grid use changes.')], HRESULT, 'OnUseGroundToGridChanged',
              ( ['in'], VARIANT_BOOL, 'g2g' )),
    COMMETHOD([helpstring(u'Called when Angular Correction Offset is changed.')], HRESULT, 'OnAngularCorrectionOffsetChanged',
              ( ['in'], c_double, 'angOffset' )),
    COMMETHOD([helpstring(u'Called when Distance Correction Factor is changed.')], HRESULT, 'OnDistanceCorrectionFactorChanged',
              ( ['in'], c_double, 'distFactor' )),
]
################################################################
## code template for IEditEvents4 implementation
##class IEditEvents4_Impl(object):
##    def OnDistanceCorrectionFactorChanged(self, distFactor):
##        u'Called when Distance Correction Factor is changed.'
##        #return 
##
##    def OnAngularCorrectionOffsetChanged(self, angOffset):
##        u'Called when Angular Correction Offset is changed.'
##        #return 
##
##    def OnUseGroundToGridChanged(self, g2g):
##        u'Called when Ground to Grid use changes.'
##        #return 
##


# values for enumeration 'esriVersion'
esriReconcileVersion = 0
esriPreReconcileVersion = 1
esriStartEditingVersion = 2
esriCommonAncestorVersion = 3
esriCurrentVersion = 4
esriVersion = c_int # enum
IConflictsWindow._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if Conflicts Window is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'vis' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Conflicts Window is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'vis' )),
    COMMETHOD([helpstring(u'Indicates if conflicts have been detected.')], HRESULT, 'HasConflicts',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'conflicts' )),
    COMMETHOD(['propget', helpstring(u'ID of the selected row or feature, or -1 if no current row.')], HRESULT, 'CurrentRow',
              ( ['retval', 'out'], POINTER(c_int), 'fid' )),
    COMMETHOD(['propget', helpstring(u'Class of the selected feature, or 0 if no ConflictClass.')], HRESULT, 'CurrentClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IConflictClass)), 'conflictClass' )),
    COMMETHOD(['propget', helpstring(u'The number of classes with conflicts.')], HRESULT, 'ClassCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Class by index.')], HRESULT, 'Class',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IConflictClass)), 'conflictClass' )),
    COMMETHOD(['propget', helpstring(u'Enumerate the feature IDs for a ConflictClass.')], HRESULT, 'IDs',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IConflictClass), 'conflictClass' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumIDs)), 'IDs' )),
    COMMETHOD([helpstring(u'Resets the conflicts.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring(u'Finds a cached table corresponding to the conflict class and version.')], HRESULT, 'FindTable',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IConflictClass), 'conflictClass' ),
              ( ['in'], esriVersion, 'vers' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'Table' )),
]
################################################################
## code template for IConflictsWindow implementation
##class IConflictsWindow_Impl(object):
##    def Reset(self):
##        u'Resets the conflicts.'
##        #return 
##
##    @property
##    def CurrentRow(self):
##        u'ID of the selected row or feature, or -1 if no current row.'
##        #return fid
##
##    def FindTable(self, conflictClass, vers):
##        u'Finds a cached table corresponding to the conflict class and version.'
##        #return Table
##
##    @property
##    def ClassCount(self):
##        u'The number of classes with conflicts.'
##        #return Count
##
##    @property
##    def IDs(self, conflictClass):
##        u'Enumerate the feature IDs for a ConflictClass.'
##        #return IDs
##
##    def _get(self):
##        u'Indicates if Conflicts Window is visible.'
##        #return vis
##    def _set(self, vis):
##        u'Indicates if Conflicts Window is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def HasConflicts(self):
##        u'Indicates if conflicts have been detected.'
##        #return conflicts
##
##    @property
##    def CurrentClass(self):
##        u'Class of the selected feature, or 0 if no ConflictClass.'
##        #return conflictClass
##
##    @property
##    def Class(self, index):
##        u'Class by index.'
##        #return conflictClass
##

IConflictsWindow2._methods_ = [
    COMMETHOD([helpstring(u'Removes the conlict class from the window.')], HRESULT, 'RemoveClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IConflictClass), 'conflictClass' )),
]
################################################################
## code template for IConflictsWindow2 implementation
##class IConflictsWindow2_Impl(object):
##    def RemoveClass(self, conflictClass):
##        u'Removes the conlict class from the window.'
##        #return 
##

IConflictsWindow3._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether the conficts window is displayed when a conflicts event is fired.')], HRESULT, 'ShowOnConflictsDetected',
              ( ['in'], VARIANT_BOOL, 'showWindow' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the conficts window is displayed when a conflicts event is fired.')], HRESULT, 'ShowOnConflictsDetected',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'showWindow' )),
    COMMETHOD(['propget', helpstring(u'The indexes of the fields in the row that are currently selected.')], HRESULT, 'SelectedFieldIndexes',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppLongArray' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the visited state of the current selected tree item.')], HRESULT, 'CurrentVisited',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'visited' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the visited state of the current selected tree item.')], HRESULT, 'CurrentVisited',
              ( ['in'], VARIANT_BOOL, 'visited' )),
]
################################################################
## code template for IConflictsWindow3 implementation
##class IConflictsWindow3_Impl(object):
##    def _get(self):
##        u'Indicates whether the visited state of the current selected tree item.'
##        #return visited
##    def _set(self, visited):
##        u'Indicates whether the visited state of the current selected tree item.'
##    CurrentVisited = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SelectedFieldIndexes(self):
##        u'The indexes of the fields in the row that are currently selected.'
##        #return ppLongArray
##
##    def _get(self):
##        u'Indicates whether the conficts window is displayed when a conflicts event is fired.'
##        #return showWindow
##    def _set(self, showWindow):
##        u'Indicates whether the conficts window is displayed when a conflicts event is fired.'
##    ShowOnConflictsDetected = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriCourseType'
esriCTDirectionDistance = 0
esriCTAngleDistance = 1
esriCTCurve = 2
esriCTTangentCurve = 3
esriCourseType = c_int # enum
class ITraverseClosure(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that report the traverse closure.'
    _iid_ = GUID('{38BD41D8-457C-485C-A07D-985A088ACAA4}')
    _idlflags_ = ['oleautomation']
ITraverseClosure._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of courses in the traverse.')], HRESULT, 'CourseCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'The total length of the traverse.')], HRESULT, 'TotalLength',
              ( ['retval', 'out'], POINTER(c_double), 'length' )),
    COMMETHOD(['propget', helpstring(u'The closing point of the traverse.')], HRESULT, 'EndPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propget', helpstring(u'The calculated closing point of the traverse.')], HRESULT, 'CalculatedEndPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'point' )),
    COMMETHOD(['propget', helpstring(u'The horizontal difference in closure.')], HRESULT, 'MisclosureX',
              ( ['retval', 'out'], POINTER(c_double), 'Y' )),
    COMMETHOD(['propget', helpstring(u'The vertical difference in closure.')], HRESULT, 'MisclosureY',
              ( ['retval', 'out'], POINTER(c_double), 'X' )),
    COMMETHOD(['propget', helpstring(u'The distance of the vector of misclosure.')], HRESULT, 'MisclosureDistance',
              ( ['retval', 'out'], POINTER(c_double), 'dist' )),
    COMMETHOD(['propget', helpstring(u'The direction of the vector of misclosure.')], HRESULT, 'MisclosureDirection',
              ( ['retval', 'out'], POINTER(c_double), 'direction' )),
    COMMETHOD(['propget', helpstring(u'The relative error ratio of misclosure.')], HRESULT, 'RelativeErrorRatio',
              ( ['retval', 'out'], POINTER(c_double), 'ratio' )),
]
################################################################
## code template for ITraverseClosure implementation
##class ITraverseClosure_Impl(object):
##    @property
##    def TotalLength(self):
##        u'The total length of the traverse.'
##        #return length
##
##    @property
##    def EndPoint(self):
##        u'The closing point of the traverse.'
##        #return point
##
##    @property
##    def MisclosureY(self):
##        u'The vertical difference in closure.'
##        #return X
##
##    @property
##    def MisclosureX(self):
##        u'The horizontal difference in closure.'
##        #return Y
##
##    @property
##    def CourseCount(self):
##        u'The number of courses in the traverse.'
##        #return Count
##
##    @property
##    def MisclosureDirection(self):
##        u'The direction of the vector of misclosure.'
##        #return direction
##
##    @property
##    def RelativeErrorRatio(self):
##        u'The relative error ratio of misclosure.'
##        #return ratio
##
##    @property
##    def CalculatedEndPoint(self):
##        u'The calculated closing point of the traverse.'
##        #return point
##
##    @property
##    def MisclosureDistance(self):
##        u'The distance of the vector of misclosure.'
##        #return dist
##

IShapeConstructorTool._methods_ = [
]
################################################################
## code template for IShapeConstructorTool implementation
##class IShapeConstructorTool_Impl(object):

class SketchPropertiesWindow(CoClass):
    u'Dialog for modifying sketch geometry.'
    _reg_clsid_ = GUID('{9195DE79-0699-460F-BA0C-29647F878828}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchPropertiesWindow._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ISketchPropertiesWindow, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension]

class DimensionPropertyPage(CoClass):
    u'A property page for modifying the properties of dimension feature classes.'
    _reg_clsid_ = GUID('{DD2E5BFD-FF3C-4DA3-BB5A-98526DE591DB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
DimensionPropertyPage._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IPropertyPage, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IComPropertyPage, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IComPropertyPage2, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IPropertyPageContext]

IEditSketchExtension._methods_ = [
    COMMETHOD([helpstring(u'Indicates whether this extension applies to the current edit environment.')], HRESULT, 'Applies',
              ( ['in'], POINTER(IEditor), 'Editor' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Applies' )),
    COMMETHOD([helpstring(u'Called when the sketch extension is about to be used.')], HRESULT, 'Activate',
              ( ['in'], POINTER(IEditor), 'Editor' )),
    COMMETHOD([helpstring(u'Called when the sketch extension is no longer needed.')], HRESULT, 'Deactivate'),
    COMMETHOD([helpstring(u'Lets the extension know the feature is about to be stored.')], HRESULT, 'BeforeStoreFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'feature' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the sketch allows the inserting of additional vertices.')], HRESULT, 'CanInsertVertices',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canInsert' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the sketch allows the deleting of vertices.')], HRESULT, 'CanDeleteVertices',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canDelete' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the sketch allows the moving of vertices.')], HRESULT, 'CanMoveVertices',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canMove' )),
    COMMETHOD(['propget', helpstring(u'The geometry type used for the edit sketch when creating new features.')], HRESULT, 'SketchGeometryType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'GeometryType' )),
    COMMETHOD([helpstring(u'The geometry that will be used in the sketch when modifying a feature.')], HRESULT, 'CreateSketchGeometry',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'feature' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'sketchGeometry' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the SketchExtension will use a custom feedback.')], HRESULT, 'HasFeedback',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasFeedback' )),
    COMMETHOD([helpstring(u'Called when a new feedback is needed.')], HRESULT, 'CreateFeedback',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFeedback)), 'feedback' )),
    COMMETHOD([helpstring(u'Called when the feedback needs to be started.')], HRESULT, 'StartFeedback',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Called when the feedback is no longer necessary.')], HRESULT, 'StopFeedback',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'newSketchGeometry' )),
    COMMETHOD([helpstring(u'Called when the feedback needs to be started using an existing geometry.')], HRESULT, 'StartFeedbackFromShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'shape' )),
]
################################################################
## code template for IEditSketchExtension implementation
##class IEditSketchExtension_Impl(object):
##    def StartFeedbackFromShape(self, shape):
##        u'Called when the feedback needs to be started using an existing geometry.'
##        #return 
##
##    @property
##    def CanDeleteVertices(self):
##        u'Indicates whether the sketch allows the deleting of vertices.'
##        #return canDelete
##
##    def CreateSketchGeometry(self, feature):
##        u'The geometry that will be used in the sketch when modifying a feature.'
##        #return sketchGeometry
##
##    @property
##    def CanMoveVertices(self):
##        u'Indicates whether the sketch allows the moving of vertices.'
##        #return canMove
##
##    def Deactivate(self):
##        u'Called when the sketch extension is no longer needed.'
##        #return 
##
##    def StopFeedback(self):
##        u'Called when the feedback is no longer necessary.'
##        #return newSketchGeometry
##
##    def CreateFeedback(self):
##        u'Called when a new feedback is needed.'
##        #return feedback
##
##    def StartFeedback(self, point):
##        u'Called when the feedback needs to be started.'
##        #return 
##
##    @property
##    def CanInsertVertices(self):
##        u'Indicates whether the sketch allows the inserting of additional vertices.'
##        #return canInsert
##
##    def Activate(self, Editor):
##        u'Called when the sketch extension is about to be used.'
##        #return 
##
##    def BeforeStoreFeature(self, feature, Geometry):
##        u'Lets the extension know the feature is about to be stored.'
##        #return 
##
##    @property
##    def HasFeedback(self):
##        u'Indicates whether the SketchExtension will use a custom feedback.'
##        #return HasFeedback
##
##    def Applies(self, Editor):
##        u'Indicates whether this extension applies to the current edit environment.'
##        #return Applies
##
##    @property
##    def SketchGeometryType(self):
##        u'The geometry type used for the edit sketch when creating new features.'
##        #return GeometryType
##

IRepresentationMarkerEditor._methods_ = [
    COMMETHOD([helpstring(u'Displays the representation marker editor dialog.')], HRESULT, 'DoModal',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'parentWnd' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IRepresentationGraphics), 'graphics' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ok' )),
    COMMETHOD(['propget', helpstring(u'Representation marker edited by the dialog.')], HRESULT, 'Marker',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IRepresentationGraphics)), 'graphics' )),
]
################################################################
## code template for IRepresentationMarkerEditor implementation
##class IRepresentationMarkerEditor_Impl(object):
##    @property
##    def Marker(self):
##        u'Representation marker edited by the dialog.'
##        #return graphics
##
##    def DoModal(self, parentWnd, graphics):
##        u'Displays the representation marker editor dialog.'
##        #return ok
##

class StraightConstructor(CoClass):
    u'Constructor for adding a straight line sketch to the end of a segmented sketch geometry.'
    _reg_clsid_ = GUID('{5306FC81-139C-4127-BA73-646FB9780B2D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
StraightConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

ITraverseWindowEvents._methods_ = [
    COMMETHOD([helpstring(u'Called when the course type changes.')], HRESULT, 'OnChangeCourseType'),
    COMMETHOD([helpstring(u'Called when the focus is set to one of the measure text controls.')], HRESULT, 'OnSetFocusToMeasure',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Called when a curve parameter is changed for either the tangent curve or curve course.')], HRESULT, 'OnChangeCurveParameter',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Called when the turn direction is changed.')], HRESULT, 'OnChangeTurnDirection'),
    COMMETHOD([helpstring(u'Called when the curve direction type changes.')], HRESULT, 'OnChangeCurveDirectionType'),
    COMMETHOD([helpstring(u'Called after the course is added.')], HRESULT, 'OnAddCourse'),
    COMMETHOD([helpstring(u'Called when a traverse is added from a text file.')], HRESULT, 'OnLoadTraverse'),
    COMMETHOD([helpstring(u'Called when the start point of the traverse is set.')], HRESULT, 'OnSetStartPoint'),
    COMMETHOD([helpstring(u'Called when the finish point of the traverse is set.')], HRESULT, 'OnSetFinishPoint'),
    COMMETHOD([helpstring(u'Called when the Traverse Window dialog is activated.')], HRESULT, 'OnActivate'),
    COMMETHOD([helpstring(u'Called when the Traverse Window dialog is deactivated.')], HRESULT, 'OnDeactivate'),
    COMMETHOD([helpstring(u'Called when the position of the Traverse Window dialog changes.')], HRESULT, 'OnPositionChanged'),
]
################################################################
## code template for ITraverseWindowEvents implementation
##class ITraverseWindowEvents_Impl(object):
##    def OnChangeCurveDirectionType(self):
##        u'Called when the curve direction type changes.'
##        #return 
##
##    def OnSetFocusToMeasure(self, index):
##        u'Called when the focus is set to one of the measure text controls.'
##        #return 
##
##    def OnActivate(self):
##        u'Called when the Traverse Window dialog is activated.'
##        #return 
##
##    def OnLoadTraverse(self):
##        u'Called when a traverse is added from a text file.'
##        #return 
##
##    def OnAddCourse(self):
##        u'Called after the course is added.'
##        #return 
##
##    def OnSetStartPoint(self):
##        u'Called when the start point of the traverse is set.'
##        #return 
##
##    def OnChangeCourseType(self):
##        u'Called when the course type changes.'
##        #return 
##
##    def OnDeactivate(self):
##        u'Called when the Traverse Window dialog is deactivated.'
##        #return 
##
##    def OnSetFinishPoint(self):
##        u'Called when the finish point of the traverse is set.'
##        #return 
##
##    def OnChangeCurveParameter(self, index):
##        u'Called when a curve parameter is changed for either the tangent curve or curve course.'
##        #return 
##
##    def OnChangeTurnDirection(self):
##        u'Called when the turn direction is changed.'
##        #return 
##
##    def OnPositionChanged(self):
##        u'Called when the position of the Traverse Window dialog changes.'
##        #return 
##

class IModifyTask(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Indicator interface that identifies an edit task for modifying features.'
    _iid_ = GUID('{C9F46941-2BDF-11D2-84BE-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
IModifyTask._methods_ = [
]
################################################################
## code template for IModifyTask implementation
##class IModifyTask_Impl(object):


# values for enumeration 'esriChangeVersion'
esriChangeSourceVersion = 0
esriChangeTargetVersion = 1
esriChangeCommonAncestorVersion = 2
esriChangeVersion = c_int # enum
class DistanceDistanceConstructor(CoClass):
    u'Creates a point from two distances.'
    _reg_clsid_ = GUID('{BC8A083E-02B5-4DEA-8C8E-EA0B633CFF9F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
DistanceDistanceConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

class SketchTangentCurveCommand(CoClass):
    u'Initializes a new TangentCurveConstructor on the Editor.'
    _reg_clsid_ = GUID('{E443DE0C-4F6E-45EC-8953-3B29678E1E74}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchTangentCurveCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

IDimensionStyleImportDialog._methods_ = [
    COMMETHOD([helpstring(u'Adds a style collection that will be used to check names against. More than one style collection can be added.')], HRESULT, 'AddNameCheck',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IDimensionStyles), 'nameCheckStyles' )),
    COMMETHOD([helpstring(u'Displays the dialog used to import dimension styles.')], HRESULT, 'DoModalImport',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'SourceClass' ),
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IDimensionStyles), 'destinationStyles' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hWndParent' )),
    COMMETHOD([helpstring(u'Displays the dialog used to import a single dimension style.')], HRESULT, 'DoModalSelect',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'SourceClass' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hWndParent' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IDimensionStyle)), 'importStyle' )),
]
################################################################
## code template for IDimensionStyleImportDialog implementation
##class IDimensionStyleImportDialog_Impl(object):
##    def DoModalImport(self, SourceClass, destinationStyles, hWndParent):
##        u'Displays the dialog used to import dimension styles.'
##        #return 
##
##    def DoModalSelect(self, SourceClass, hWndParent):
##        u'Displays the dialog used to import a single dimension style.'
##        #return importStyle
##
##    def AddNameCheck(self, nameCheckStyles):
##        u'Adds a style collection that will be used to check names against. More than one style collection can be added.'
##        #return 
##


# values for enumeration 'esriTurnDirection'
esriTDLeft = 0
esriTDRight = 1
esriTurnDirection = c_int # enum
class PolygonFeatureTool(CoClass):
    u'Tool that creates a new Polygon sketch geometry.'
    _reg_clsid_ = GUID('{8F79967B-66A0-4A1C-B884-F44BC7E26921}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
PolygonFeatureTool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ITool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand, IShapeConstructorTool]

class CutPolygonsTool(CoClass):
    _reg_clsid_ = GUID('{4E58D1FE-DC40-4770-A081-4D99335941ED}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
CutPolygonsTool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ITool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand, IShapeConstructorTool]

class VersionChangesWindow(CoClass):
    u'Window used to find changes between versions.'
    _reg_clsid_ = GUID('{34DC7BAB-928D-4BF9-B0CB-7DD285921046}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IVersionChangesWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to Version Changes Window.'
    _iid_ = GUID('{5203AD2E-FFDC-4357-BA9F-45175813D590}')
    _idlflags_ = ['oleautomation']
VersionChangesWindow._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IVersionChangesWindow]

class IntersectionConstructor(CoClass):
    u'Intersects two line segments to create a new point.'
    _reg_clsid_ = GUID('{CF34DB67-2D0B-484E-BE3D-C08B6D347A0F}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
IntersectionConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

class IEditTaskName(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that identify edit tasks.'
    _iid_ = GUID('{16B50AFC-51B0-4261-A4F8-1B568FA1D79E}')
    _idlflags_ = ['oleautomation']
IEditTaskName._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the edit task.')], HRESULT, 'UniqueName',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
]
################################################################
## code template for IEditTaskName implementation
##class IEditTaskName_Impl(object):
##    @property
##    def UniqueName(self):
##        u'The name of the edit task.'
##        #return Name
##

IConstructionMiniBar2._methods_ = [
    COMMETHOD([helpstring(u'Shows the construction minibar.')], HRESULT, 'ShowEx',
              ( ['in'], c_int, 'xLoc' ),
              ( ['in'], c_int, 'yLoc' ),
              ( ['in'], esriConstructionToolbarLocation, 'Location' )),
]
################################################################
## code template for IConstructionMiniBar2 implementation
##class IConstructionMiniBar2_Impl(object):
##    def ShowEx(self, xLoc, yLoc, Location):
##        u'Shows the construction minibar.'
##        #return 
##

class SketchConstructor(CoClass):
    u'Constructor for the Sketch Tool.'
    _reg_clsid_ = GUID('{D0CD643D-51D3-4AFF-AB3B-829BD4DEF536}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

class MidpointConstructor(CoClass):
    u'Adds a point at the midpoint of a line.'
    _reg_clsid_ = GUID('{C845A90E-E40A-4065-B77E-BCF46E2604F3}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
MidpointConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

IDimensionStyleDialog._methods_ = [
    COMMETHOD([helpstring(u'Displays the dialog used to define a new dimension style.')], HRESULT, 'DoModal',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'FeatureClass' ),
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IDimensionStyle), 'copyStyle' ),
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hWndParent' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IDimensionStyle)), 'newStyle' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the dimension style dialog shouild be opened in read-only mode.')], HRESULT, 'ReadOnly',
              ( ['in'], VARIANT_BOOL, 'rhs' )),
]
################################################################
## code template for IDimensionStyleDialog implementation
##class IDimensionStyleDialog_Impl(object):
##    def DoModal(self, FeatureClass, copyStyle, hWndParent):
##        u'Displays the dialog used to define a new dimension style.'
##        #return newStyle
##
##    def _set(self, rhs):
##        u'Indicates if the dimension style dialog shouild be opened in read-only mode.'
##    ReadOnly = property(fset = _set, doc = _set.__doc__)
##

class PointFeatureTool(CoClass):
    u'Tool that creates a new Point/Multipoint sketch geometry.'
    _reg_clsid_ = GUID('{2A8B3331-5238-4025-972E-452A69535B06}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
PointFeatureTool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ITool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand, IShapeConstructorTool]

class ContinueFeatureTool(CoClass):
    _reg_clsid_ = GUID('{2B303C18-4441-47B0-A9C6-605F110744DB}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
ContinueFeatureTool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ITool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand, IShapeConstructorTool]

class IEnumRow2(IEnumRow):
    _case_insensitive_ = True
    u'Provides access to source of a selected row.'
    _iid_ = GUID('{F3E26F0C-45B8-4C5B-AC83-B32226A894B6}')
    _idlflags_ = ['oleautomation']
IEnumRow._methods_ = [
    COMMETHOD(['propget', helpstring(u'The number of rows.')], HRESULT, 'Count',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD([helpstring(u'Retrieves the next row in the sequence.')], HRESULT, 'Next',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow)), 'nextRow' )),
    COMMETHOD([helpstring(u'Resets the enumeration sequence to the beginning.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumRow implementation
##class IEnumRow_Impl(object):
##    @property
##    def Count(self):
##        u'The number of rows.'
##        #return Count
##
##    def Reset(self):
##        u'Resets the enumeration sequence to the beginning.'
##        #return 
##
##    def Next(self):
##        u'Retrieves the next row in the sequence.'
##        #return nextRow
##

IEnumRow2._methods_ = [
    COMMETHOD([helpstring(u"Retrieves the next feature's featurelayer in the sequence.")], HRESULT, 'get_FeatureLayer',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IFeatureLayer)), 'ppFeatureLayer' )),
    COMMETHOD([helpstring(u"Retrieves the next row's standalonetable in the sequence.")], HRESULT, 'get_StandaloneTable',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IStandaloneTable)), 'ppStandaloneTable' )),
]
################################################################
## code template for IEnumRow2 implementation
##class IEnumRow2_Impl(object):
##    def get_StandaloneTable(self):
##        u"Retrieves the next row's standalonetable in the sequence."
##        #return ppStandaloneTable
##
##    def get_FeatureLayer(self):
##        u"Retrieves the next feature's featurelayer in the sequence."
##        #return ppFeatureLayer
##


# values for enumeration 'esriSnapToleranceUnits'
esriSnapTolerancePixels = 0
esriSnapToleranceMapUnits = 1
esriSnapToleranceUnits = c_int # enum

# values for enumeration 'esriChangeType'
esriChangeTypeUndefined = -1
esriChangeTypeInsert = 0
esriChangeTypeDelete = 1
esriChangeTypeUpdate = 2
esriChangeType = c_int # enum
class IEnumFieldMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that return field maps.'
    _iid_ = GUID('{07009C64-183B-4AA9-801F-AD8665449C79}')
    _idlflags_ = ['oleautomation']
IEnumFieldMap._methods_ = [
    COMMETHOD([helpstring(u'Retrieves the next field mapping in the sequence.')], HRESULT, 'Next',
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField)), 'ppSourceField' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField)), 'ppTargetField' )),
    COMMETHOD([helpstring(u'Reset enum to first element.')], HRESULT, 'Reset'),
]
################################################################
## code template for IEnumFieldMap implementation
##class IEnumFieldMap_Impl(object):
##    def Reset(self):
##        u'Reset enum to first element.'
##        #return 
##
##    def Next(self):
##        u'Retrieves the next field mapping in the sequence.'
##        #return ppSourceField, ppTargetField
##

class AutoCompletePolygonFeatureTool(CoClass):
    u'Tool that uses the AutoCompletePolygon Task to create a new Polygon from a Line sketch geometry.'
    _reg_clsid_ = GUID('{6F5FC612-D1EF-4D32-A2E1-18A1CB22331C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
AutoCompletePolygonFeatureTool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ITool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand, IShapeConstructorTool]

class AngleDistanceConstructor(CoClass):
    u'Uses an angle and a distance to create a new point.'
    _reg_clsid_ = GUID('{4377DBAB-F2F7-4FBA-994F-15F169C05352}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
AngleDistanceConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

class EndPointArcConstructor(CoClass):
    u'Creates a circular arc segment.'
    _reg_clsid_ = GUID('{08E3E93E-05E5-4231-A1F2-01AF3C8EEFFA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
EndPointArcConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

class FreeAlignedConstructor(CoClass):
    u'A dimension feature constructor for creating alingned dimension features.'
    _reg_clsid_ = GUID('{6D4EB6A0-A2C1-4595-B25A-54A77D267A36}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
FreeAlignedConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDimensionConstructor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]


# values for enumeration 'esriAdjustmentType'
esriAdjustmentTypeCompass = 0
esriAdjustmentTypeTransit = 1
esriAdjustmentTypeCrandall = 2
esriAdjustmentType = c_int # enum
class ConstructPointsCommand(CoClass):
    _reg_clsid_ = GUID('{02DE1B8A-6C74-40B2-9C1B-AFA176E8CAB0}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
ConstructPointsCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

class IEditSketchExtension2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that extend the edit sketch.'
    _iid_ = GUID('{26CA7BB7-17F5-42D6-8AEC-D8A231B7F92E}')
    _idlflags_ = ['oleautomation']
IEditSketchExtension2._methods_ = [
    COMMETHOD([helpstring(u'Indicates whether this extension applies to the current edit environment.')], HRESULT, 'Applies',
              ( ['in'], POINTER(IEditor), 'Editor' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Applies' )),
    COMMETHOD([helpstring(u'Called when the sketch extension is about to be used.')], HRESULT, 'Activate',
              ( ['in'], POINTER(IEditor), 'Editor' )),
    COMMETHOD([helpstring(u'Called when the sketch extension is no longer needed.')], HRESULT, 'Deactivate'),
    COMMETHOD([helpstring(u'Lets the extension know the feature is about to be stored.')], HRESULT, 'BeforeStoreFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'feature' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the sketch allows the inserting of additional vertices.')], HRESULT, 'CanInsertVertices',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canInsert' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the sketch allows the deleting of vertices.')], HRESULT, 'CanDeleteVertices',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canDelete' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the sketch allows the moving of vertices.')], HRESULT, 'CanMoveVertices',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'canMove' )),
    COMMETHOD(['propget', helpstring(u'The geometry type used for the edit sketch when creating new features.')], HRESULT, 'SketchGeometryType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'GeometryType' )),
    COMMETHOD([helpstring(u'The geometry that will be used in the sketch when modifying a feature.')], HRESULT, 'CreateSketchGeometry',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature), 'feature' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'sketchGeometry' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the SketchExtension will use a custom feedback.')], HRESULT, 'HasFeedback',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasFeedback' )),
    COMMETHOD([helpstring(u'Called when a new feedback is needed.')], HRESULT, 'CreateFeedback',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFeedback)), 'feedback' )),
    COMMETHOD([helpstring(u'Called when the feedback needs to be started.')], HRESULT, 'StartFeedback',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Called when the feedback is no longer necessary.')], HRESULT, 'StopFeedback',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry)), 'newSketchGeometry' )),
    COMMETHOD([helpstring(u'Called when the feedback needs to be started using an existing geometry.')], HRESULT, 'StartFeedbackFromShape',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'shape' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the SketchExtension will use a custom feedback before the sketch starts.')], HRESULT, 'HasPreSketchFeedback',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'HasFeedback' )),
    COMMETHOD([helpstring(u'Called when a new feedback is needed before the sketch starts.')], HRESULT, 'CreatePreSketchFeedback',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFeedback)), 'feedback' )),
    COMMETHOD([helpstring(u'Called when the feedback needs to be started.')], HRESULT, 'StartPreSketchFeedback',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Called when the feedback needs to be stopped.')], HRESULT, 'StopPreSketchFeedback'),
    COMMETHOD([helpstring(u'Called when a key is pressed.')], HRESULT, 'OnKeyDown',
              ( ['in'], c_int, 'keyState' ),
              ( ['in'], c_int, 'shift' )),
    COMMETHOD([helpstring(u'Called when a key is pressed.')], HRESULT, 'OnKeyUp',
              ( ['in'], c_int, 'keyState' ),
              ( ['in'], c_int, 'shift' )),
]
################################################################
## code template for IEditSketchExtension2 implementation
##class IEditSketchExtension2_Impl(object):
##    def StartFeedbackFromShape(self, shape):
##        u'Called when the feedback needs to be started using an existing geometry.'
##        #return 
##
##    @property
##    def HasPreSketchFeedback(self):
##        u'Indicates whether the SketchExtension will use a custom feedback before the sketch starts.'
##        #return HasFeedback
##
##    @property
##    def CanDeleteVertices(self):
##        u'Indicates whether the sketch allows the deleting of vertices.'
##        #return canDelete
##
##    def CreateSketchGeometry(self, feature):
##        u'The geometry that will be used in the sketch when modifying a feature.'
##        #return sketchGeometry
##
##    @property
##    def CanMoveVertices(self):
##        u'Indicates whether the sketch allows the moving of vertices.'
##        #return canMove
##
##    def Deactivate(self):
##        u'Called when the sketch extension is no longer needed.'
##        #return 
##
##    def StopFeedback(self):
##        u'Called when the feedback is no longer necessary.'
##        #return newSketchGeometry
##
##    def CreateFeedback(self):
##        u'Called when a new feedback is needed.'
##        #return feedback
##
##    def StartFeedback(self, point):
##        u'Called when the feedback needs to be started.'
##        #return 
##
##    @property
##    def CanInsertVertices(self):
##        u'Indicates whether the sketch allows the inserting of additional vertices.'
##        #return canInsert
##
##    def StopPreSketchFeedback(self):
##        u'Called when the feedback needs to be stopped.'
##        #return 
##
##    def OnKeyDown(self, keyState, shift):
##        u'Called when a key is pressed.'
##        #return 
##
##    def Activate(self, Editor):
##        u'Called when the sketch extension is about to be used.'
##        #return 
##
##    def BeforeStoreFeature(self, feature, Geometry):
##        u'Lets the extension know the feature is about to be stored.'
##        #return 
##
##    @property
##    def HasFeedback(self):
##        u'Indicates whether the SketchExtension will use a custom feedback.'
##        #return HasFeedback
##
##    def Applies(self, Editor):
##        u'Indicates whether this extension applies to the current edit environment.'
##        #return Applies
##
##    def OnKeyUp(self, keyState, shift):
##        u'Called when a key is pressed.'
##        #return 
##
##    def StartPreSketchFeedback(self, point):
##        u'Called when the feedback needs to be started.'
##        #return 
##
##    def CreatePreSketchFeedback(self):
##        u'Called when a new feedback is needed before the sketch starts.'
##        #return feedback
##
##    @property
##    def SketchGeometryType(self):
##        u'The geometry type used for the edit sketch when creating new features.'
##        #return GeometryType
##

class StraightAnnoConstructor(CoClass):
    u'An annotation feature constructor for creating straight annotation with an angle.'
    _reg_clsid_ = GUID('{409C3EF3-A1A0-415D-BA0E-AF25D3F2821C}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
StraightAnnoConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationConstructor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]


# values for enumeration 'esriCurveParameter'
esriCPChord = 0
esriCPAngle = 1
esriCPArc = 2
esriCPRadius = 3
esriCurveParameter = c_int # enum

# values for enumeration 'esriCurveDirectionType'
esriCDTChord = 0
esriCDTRadial = 1
esriCDTTangent = 2
esriCurveDirectionType = c_int # enum
ICourse._methods_ = [
    COMMETHOD(['propget', helpstring(u'The type of course.')], HRESULT, 'Type',
              ( ['retval', 'out'], POINTER(esriCourseType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The type of course.')], HRESULT, 'Type',
              ( ['in'], esriCourseType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'The first value that defines the course.')], HRESULT, 'Measure1',
              ( ['retval', 'out'], POINTER(c_double), 'measure' )),
    COMMETHOD(['propput', helpstring(u'The first value that defines the course.')], HRESULT, 'Measure1',
              ( ['in'], c_double, 'measure' )),
    COMMETHOD(['propget', helpstring(u'The second value that defines the course.')], HRESULT, 'Measure2',
              ( ['retval', 'out'], POINTER(c_double), 'measure' )),
    COMMETHOD(['propput', helpstring(u'The second value that defines the course.')], HRESULT, 'Measure2',
              ( ['in'], c_double, 'measure' )),
    COMMETHOD(['propget', helpstring(u'Optionally, the direction of the curve if the course type is esriCTCurve.')], HRESULT, 'Measure3',
              ( ['retval', 'out'], POINTER(c_double), 'measure' )),
    COMMETHOD(['propput', helpstring(u'Optionally, the direction of the curve if the course type is esriCTCurve.')], HRESULT, 'Measure3',
              ( ['in'], c_double, 'measure' )),
    COMMETHOD(['propget', helpstring(u'If the course type is esriCTTangentCurve or esriCTCurve, defines the curve parameter of the first value.')], HRESULT, 'CurveParameter1',
              ( ['retval', 'out'], POINTER(esriCurveParameter), 'cp' )),
    COMMETHOD(['propput', helpstring(u'If the course type is esriCTTangentCurve or esriCTCurve, defines the curve parameter of the first value.')], HRESULT, 'CurveParameter1',
              ( ['in'], esriCurveParameter, 'cp' )),
    COMMETHOD(['propget', helpstring(u'If the course type is esriCTTangentCurve or esriCTCurve, defines the curve parameter of the second value.')], HRESULT, 'CurveParameter2',
              ( ['retval', 'out'], POINTER(esriCurveParameter), 'cp' )),
    COMMETHOD(['propput', helpstring(u'If the course type is esriCTTangentCurve or esriCTCurve, defines the curve parameter of the second value.')], HRESULT, 'CurveParameter2',
              ( ['in'], esriCurveParameter, 'cp' )),
    COMMETHOD(['propget', helpstring(u'Indicates if curve turns to the left or right.')], HRESULT, 'TurnDirection',
              ( ['retval', 'out'], POINTER(esriTurnDirection), 'td' )),
    COMMETHOD(['propput', helpstring(u'Indicates if curve turns to the left or right.')], HRESULT, 'TurnDirection',
              ( ['in'], esriTurnDirection, 'td' )),
    COMMETHOD(['propget', helpstring(u'If the course type is esriCTCurve, defines the curve direction type of the third value.')], HRESULT, 'CurveDirectionType',
              ( ['retval', 'out'], POINTER(esriCurveDirectionType), 'cdt' )),
    COMMETHOD(['propput', helpstring(u'If the course type is esriCTCurve, defines the curve direction type of the third value.')], HRESULT, 'CurveDirectionType',
              ( ['in'], esriCurveDirectionType, 'cdt' )),
    COMMETHOD([helpstring(u'Adds a reference for the course to the input geometry.')], HRESULT, 'AddSegment',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'geom' ),
              ( ['in'], c_double, 'distanceFactor' ),
              ( ['in'], c_double, 'angularOffset' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISegment)), 'seg' )),
    COMMETHOD([helpstring(u'Clones the course and adds the result to *clone.')], HRESULT, 'Clone',
              ( ['retval', 'out'], POINTER(POINTER(ICourse)), 'Clone' )),
    COMMETHOD([helpstring(u'Description of the course.')], HRESULT, 'GetDescription',
              ( ['in'], POINTER(IEditor), 'Editor' ),
              ( ['retval', 'out'], POINTER(BSTR), 'description' )),
]
################################################################
## code template for ICourse implementation
##class ICourse_Impl(object):
##    def _get(self):
##        u'The type of course.'
##        #return Type
##    def _set(self, Type):
##        u'The type of course.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The first value that defines the course.'
##        #return measure
##    def _set(self, measure):
##        u'The first value that defines the course.'
##    Measure1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The second value that defines the course.'
##        #return measure
##    def _set(self, measure):
##        u'The second value that defines the course.'
##    Measure2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Optionally, the direction of the curve if the course type is esriCTCurve.'
##        #return measure
##    def _set(self, measure):
##        u'Optionally, the direction of the curve if the course type is esriCTCurve.'
##    Measure3 = property(_get, _set, doc = _set.__doc__)
##
##    def GetDescription(self, Editor):
##        u'Description of the course.'
##        #return description
##
##    def _get(self):
##        u'Indicates if curve turns to the left or right.'
##        #return td
##    def _set(self, td):
##        u'Indicates if curve turns to the left or right.'
##    TurnDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'If the course type is esriCTCurve, defines the curve direction type of the third value.'
##        #return cdt
##    def _set(self, cdt):
##        u'If the course type is esriCTCurve, defines the curve direction type of the third value.'
##    CurveDirectionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'If the course type is esriCTTangentCurve or esriCTCurve, defines the curve parameter of the first value.'
##        #return cp
##    def _set(self, cp):
##        u'If the course type is esriCTTangentCurve or esriCTCurve, defines the curve parameter of the first value.'
##    CurveParameter1 = property(_get, _set, doc = _set.__doc__)
##
##    def Clone(self):
##        u'Clones the course and adds the result to *clone.'
##        #return Clone
##
##    def AddSegment(self, geom, distanceFactor, angularOffset):
##        u'Adds a reference for the course to the input geometry.'
##        #return seg
##
##    def _get(self):
##        u'If the course type is esriCTTangentCurve or esriCTCurve, defines the curve parameter of the second value.'
##        #return cp
##    def _set(self, cp):
##        u'If the course type is esriCTTangentCurve or esriCTCurve, defines the curve parameter of the second value.'
##    CurveParameter2 = property(_get, _set, doc = _set.__doc__)
##

class BezierCurveConstructor(CoClass):
    u'Creates a bezier curve segment.'
    _reg_clsid_ = GUID('{1CC88C81-411D-445B-B121-BFD3EAFAF293}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
BezierCurveConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

IEditTool._methods_ = [
    COMMETHOD(['propget', helpstring(u'The event source for the edit tool.')], HRESULT, 'EventSource',
              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'src' )),
]
################################################################
## code template for IEditTool implementation
##class IEditTool_Impl(object):
##    @property
##    def EventSource(self):
##        u'The event source for the edit tool.'
##        #return src
##

class PointAtEndOfLineTool(CoClass):
    u'Tool that creates a new Point/Multipoint at the end of a line geometry.'
    _reg_clsid_ = GUID('{93CE7077-F09E-455E-ADE7-B7413CDDC393}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
PointAtEndOfLineTool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ITool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand, IShapeConstructorTool]

IConflictDisplay._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the specified version is visible in the conflicts window.')], HRESULT, 'VersionVisible',
              ( ['in'], esriVersion, 'vers' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Visible' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the specified version is visible in the conflicts window.')], HRESULT, 'VersionVisible',
              ( ['in'], esriVersion, 'vers' ),
              ( ['in'], VARIANT_BOOL, 'Visible' )),
    COMMETHOD(['propget', helpstring(u'Display symbol used to draw point features.')], HRESULT, 'MarkerSymbol',
              ( ['in'], esriVersion, 'vers' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'symbol' )),
    COMMETHOD(['propputref', helpstring(u'Display symbol used to draw point features.')], HRESULT, 'MarkerSymbol',
              ( ['in'], esriVersion, 'vers' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'symbol' )),
    COMMETHOD(['propget', helpstring(u'Display symbol used to draw line features.')], HRESULT, 'LineSymbol',
              ( ['in'], esriVersion, 'vers' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'symbol' )),
    COMMETHOD(['propputref', helpstring(u'Display symbol used to draw line features.')], HRESULT, 'LineSymbol',
              ( ['in'], esriVersion, 'vers' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'symbol' )),
    COMMETHOD(['propget', helpstring(u'Display symbol used to draw polygon features.')], HRESULT, 'FillSymbol',
              ( ['in'], esriVersion, 'vers' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol)), 'symbol' )),
    COMMETHOD(['propputref', helpstring(u'Display symbol used to draw polygon features.')], HRESULT, 'FillSymbol',
              ( ['in'], esriVersion, 'vers' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IFillSymbol), 'symbol' )),
]
################################################################
## code template for IConflictDisplay implementation
##class IConflictDisplay_Impl(object):
##    def LineSymbol(self, vers, symbol):
##        u'Display symbol used to draw line features.'
##        #return 
##
##    def MarkerSymbol(self, vers, symbol):
##        u'Display symbol used to draw point features.'
##        #return 
##
##    def _get(self, vers):
##        u'Indicates whether the specified version is visible in the conflicts window.'
##        #return Visible
##    def _set(self, vers, Visible):
##        u'Indicates whether the specified version is visible in the conflicts window.'
##    VersionVisible = property(_get, _set, doc = _set.__doc__)
##
##    def FillSymbol(self, vers, symbol):
##        u'Display symbol used to draw polygon features.'
##        #return 
##

class EnumDimensionStyle(CoClass):
    u'Enumeration of dimension styles.'
    _reg_clsid_ = GUID('{C6873E8D-9007-4223-8F05-7E77622A07A6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
EnumDimensionStyle._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IEnumDimensionStyle]

INotifyZFinalize._methods_ = [
    COMMETHOD([helpstring(u'Callback is called when Z Capture fails, allows client an opportunity to set a custom Z.')], HRESULT, 'Failed',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'Geometry' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'handled' )),
]
################################################################
## code template for INotifyZFinalize implementation
##class INotifyZFinalize_Impl(object):
##    def Failed(self, Geometry):
##        u'Callback is called when Z Capture fails, allows client an opportunity to set a custom Z.'
##        #return handled
##

IShapeConstructor._methods_ = [
    COMMETHOD([helpstring(u'Initializes a newly constructed shape constructor.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(IEditor), 'pEditor' )),
    COMMETHOD(['propget', helpstring(u'Name string identifying this shape constructor.')], HRESULT, 'ID',
              ( ['retval', 'out'], POINTER(BSTR), 'ID' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the constructor is enabled.')], HRESULT, 'Enabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Enabled' )),
    COMMETHOD([helpstring(u'Prepares a shape constructor to begin receiving events.')], HRESULT, 'Activate'),
    COMMETHOD([helpstring(u'Resets a shape constructor.')], HRESULT, 'Deactivate'),
    COMMETHOD(['propget', helpstring(u'Indicates whether the constructor is currently active.')], HRESULT, 'Active',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Active' )),
    COMMETHOD([helpstring(u'Occurs when a mouse button is pressed when this constructor is active.')], HRESULT, 'OnMouseDown',
              ( ['in'], c_int, 'Button' ),
              ( ['in'], c_int, 'shift' ),
              ( ['in'], c_int, 'X' ),
              ( ['in'], c_int, 'Y' )),
    COMMETHOD([helpstring(u'Occurs when the mouse is moved when this constructor is active.')], HRESULT, 'OnMouseMove',
              ( ['in'], c_int, 'Button' ),
              ( ['in'], c_int, 'shift' ),
              ( ['in'], c_int, 'X' ),
              ( ['in'], c_int, 'Y' )),
    COMMETHOD([helpstring(u'Occurs when a mouse button is released when this constructor is active.')], HRESULT, 'OnMouseUp',
              ( ['in'], c_int, 'Button' ),
              ( ['in'], c_int, 'shift' ),
              ( ['in'], c_int, 'X' ),
              ( ['in'], c_int, 'Y' )),
    COMMETHOD([helpstring(u'Occurs when a key on the keyboard is pressed when this constructor is active.')], HRESULT, 'OnKeyDown',
              ( ['in'], c_int, 'keyState' ),
              ( ['in'], c_int, 'shift' )),
    COMMETHOD([helpstring(u'Occurs when a key on the keyboard is released when this constructor is active.')], HRESULT, 'OnKeyUp',
              ( ['in'], c_int, 'keyState' ),
              ( ['in'], c_int, 'shift' )),
    COMMETHOD([helpstring(u'Context menu event occured at the given xy location.')], HRESULT, 'OnContextMenu',
              ( ['in'], c_int, 'X' ),
              ( ['in'], c_int, 'Y' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'handled' )),
    COMMETHOD([helpstring(u'Occurs when a screen display in the application is refreshed.')], HRESULT, 'Refresh',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'hdc' )),
    COMMETHOD(['propget', helpstring(u'The mouse pointer for this constructor.')], HRESULT, 'Cursor',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'Cursor' )),
    COMMETHOD(['propget', helpstring(u'The anchor of the sketch.')], HRESULT, 'Anchor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'Anchor' )),
    COMMETHOD(['propget', helpstring(u'The current location of the mouse.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'loc' )),
    COMMETHOD(['propget', helpstring(u'The sketch constraint.')], HRESULT, 'Constraint',
              ( ['retval', 'out'], POINTER(esriSketchConstraint), 'Constraint' )),
    COMMETHOD(['propput', helpstring(u'The sketch constraint.')], HRESULT, 'Constraint',
              ( ['in'], esriSketchConstraint, 'Constraint' )),
    COMMETHOD(['propget', helpstring(u"The sketch's angular constraint.")], HRESULT, 'AngleConstraint',
              ( ['retval', 'out'], POINTER(c_double), 'val' )),
    COMMETHOD(['propput', helpstring(u"The sketch's angular constraint.")], HRESULT, 'AngleConstraint',
              ( ['in'], c_double, 'val' )),
    COMMETHOD(['propget', helpstring(u"The sketch's distance constraint.")], HRESULT, 'DistanceConstraint',
              ( ['retval', 'out'], POINTER(c_double), 'val' )),
    COMMETHOD(['propput', helpstring(u"The sketch's distance constraint.")], HRESULT, 'DistanceConstraint',
              ( ['in'], c_double, 'val' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether stream mode digitizing is enabled.')], HRESULT, 'IsStreaming',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsStreaming' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether stream mode digitizing is enabled.')], HRESULT, 'IsStreaming',
              ( ['in'], VARIANT_BOOL, 'IsStreaming' )),
    COMMETHOD([helpstring(u'Adds a point to the sketch.')], HRESULT, 'AddPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['in'], VARIANT_BOOL, 'Clone' ),
              ( ['in'], VARIANT_BOOL, 'allowUndo' )),
    COMMETHOD([helpstring(u'Called when Sketch is modified.')], HRESULT, 'SketchModified'),
]
################################################################
## code template for IShapeConstructor implementation
##class IShapeConstructor_Impl(object):
##    def OnContextMenu(self, X, Y):
##        u'Context menu event occured at the given xy location.'
##        #return handled
##
##    def Deactivate(self):
##        u'Resets a shape constructor.'
##        #return 
##
##    def _get(self):
##        u"The sketch's distance constraint."
##        #return val
##    def _set(self, val):
##        u"The sketch's distance constraint."
##    DistanceConstraint = property(_get, _set, doc = _set.__doc__)
##
##    def OnMouseMove(self, Button, shift, X, Y):
##        u'Occurs when the mouse is moved when this constructor is active.'
##        #return 
##
##    @property
##    def Location(self):
##        u'The current location of the mouse.'
##        #return loc
##
##    def OnMouseUp(self, Button, shift, X, Y):
##        u'Occurs when a mouse button is released when this constructor is active.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether stream mode digitizing is enabled.'
##        #return IsStreaming
##    def _set(self, IsStreaming):
##        u'Indicates whether stream mode digitizing is enabled.'
##    IsStreaming = property(_get, _set, doc = _set.__doc__)
##
##    def OnKeyDown(self, keyState, shift):
##        u'Occurs when a key on the keyboard is pressed when this constructor is active.'
##        #return 
##
##    @property
##    def ID(self):
##        u'Name string identifying this shape constructor.'
##        #return ID
##
##    def SketchModified(self):
##        u'Called when Sketch is modified.'
##        #return 
##
##    @property
##    def Active(self):
##        u'Indicates whether the constructor is currently active.'
##        #return Active
##
##    def _get(self):
##        u'The sketch constraint.'
##        #return Constraint
##    def _set(self, Constraint):
##        u'The sketch constraint.'
##    Constraint = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Enabled(self):
##        u'Indicates whether the constructor is enabled.'
##        #return Enabled
##
##    def Refresh(self, hdc):
##        u'Occurs when a screen display in the application is refreshed.'
##        #return 
##
##    @property
##    def Cursor(self):
##        u'The mouse pointer for this constructor.'
##        #return Cursor
##
##    def Initialize(self, pEditor):
##        u'Initializes a newly constructed shape constructor.'
##        #return 
##
##    def OnKeyUp(self, keyState, shift):
##        u'Occurs when a key on the keyboard is released when this constructor is active.'
##        #return 
##
##    @property
##    def Anchor(self):
##        u'The anchor of the sketch.'
##        #return Anchor
##
##    def _get(self):
##        u"The sketch's angular constraint."
##        #return val
##    def _set(self, val):
##        u"The sketch's angular constraint."
##    AngleConstraint = property(_get, _set, doc = _set.__doc__)
##
##    def AddPoint(self, point, Clone, allowUndo):
##        u'Adds a point to the sketch.'
##        #return 
##
##    def Activate(self):
##        u'Prepares a shape constructor to begin receiving events.'
##        #return 
##
##    def OnMouseDown(self, Button, shift, X, Y):
##        u'Occurs when a mouse button is pressed when this constructor is active.'
##        #return 
##

class ISnapEnvironment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that manage the snap agents used by the editor.'
    _iid_ = GUID('{99305F46-EF10-11D0-AACA-0000F804EB00}')
    _idlflags_ = ['oleautomation']
class ISnapEnvironment2(ISnapEnvironment):
    _case_insensitive_ = True
    u'Provides access to members used to manipulate the snap environment for Zs.'
    _iid_ = GUID('{80571989-6E71-4203-A38C-855DB22099D5}')
    _idlflags_ = ['oleautomation']
ISnapEnvironment._methods_ = [
    COMMETHOD([helpstring(u'Attempts to snap the point using the current snap environment.')], HRESULT, 'SnapPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'snapped' )),
    COMMETHOD(['propget', helpstring(u'The units used for the snap tolerance.')], HRESULT, 'SnapToleranceUnits',
              ( ['retval', 'out'], POINTER(esriSnapToleranceUnits), 'units' )),
    COMMETHOD(['propput', helpstring(u'The units used for the snap tolerance.')], HRESULT, 'SnapToleranceUnits',
              ( ['in'], esriSnapToleranceUnits, 'units' )),
    COMMETHOD(['propget', helpstring(u'The snap tolerance, measured in pixels or map units.')], HRESULT, 'SnapTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'tol' )),
    COMMETHOD(['propput', helpstring(u'The snap tolerance, measured in pixels or map units.')], HRESULT, 'SnapTolerance',
              ( ['in'], c_double, 'tol' )),
    COMMETHOD(['propget', helpstring(u'The number of active snap agents.')], HRESULT, 'SnapAgentCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'A snap agent at the given index.')], HRESULT, 'SnapAgent',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(ISnapAgent)), 'SnapAgent' )),
    COMMETHOD([helpstring(u'Removes all snap agents.')], HRESULT, 'ClearSnapAgents'),
    COMMETHOD([helpstring(u'Removes the snap agent at the given index.')], HRESULT, 'RemoveSnapAgent',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Adds a new snap agent to the snap environment.')], HRESULT, 'AddSnapAgent',
              ( ['in'], POINTER(ISnapAgent), 'SnapAgent' )),
]
################################################################
## code template for ISnapEnvironment implementation
##class ISnapEnvironment_Impl(object):
##    def _get(self):
##        u'The snap tolerance, measured in pixels or map units.'
##        #return tol
##    def _set(self, tol):
##        u'The snap tolerance, measured in pixels or map units.'
##    SnapTolerance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SnapAgent(self, index):
##        u'A snap agent at the given index.'
##        #return SnapAgent
##
##    def RemoveSnapAgent(self, index):
##        u'Removes the snap agent at the given index.'
##        #return 
##
##    def _get(self):
##        u'The units used for the snap tolerance.'
##        #return units
##    def _set(self, units):
##        u'The units used for the snap tolerance.'
##    SnapToleranceUnits = property(_get, _set, doc = _set.__doc__)
##
##    def SnapPoint(self, point):
##        u'Attempts to snap the point using the current snap environment.'
##        #return snapped
##
##    @property
##    def SnapAgentCount(self):
##        u'The number of active snap agents.'
##        #return Count
##
##    def AddSnapAgent(self, SnapAgent):
##        u'Adds a new snap agent to the snap environment.'
##        #return 
##
##    def ClearSnapAgents(self):
##        u'Removes all snap agents.'
##        #return 
##

ISnapEnvironment2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the SnapZTolerance property is used when Z snapping.')], HRESULT, 'UseSnapZTolerance',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseSnapZTolerance' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the SnapZTolerance property is used when Z snapping.')], HRESULT, 'UseSnapZTolerance',
              ( ['in'], VARIANT_BOOL, 'UseSnapZTolerance' )),
    COMMETHOD(['propget', helpstring(u'The snap tolerance used for z-values, measured in map units.')], HRESULT, 'SnapZTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'tolerance' )),
    COMMETHOD(['propput', helpstring(u'The snap tolerance used for z-values, measured in map units.')], HRESULT, 'SnapZTolerance',
              ( ['in'], c_double, 'tolerance' )),
]
################################################################
## code template for ISnapEnvironment2 implementation
##class ISnapEnvironment2_Impl(object):
##    def _get(self):
##        u'The snap tolerance used for z-values, measured in map units.'
##        #return tolerance
##    def _set(self, tolerance):
##        u'The snap tolerance used for z-values, measured in map units.'
##    SnapZTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the SnapZTolerance property is used when Z snapping.'
##        #return UseSnapZTolerance
##    def _set(self, UseSnapZTolerance):
##        u'Indicates whether the SnapZTolerance property is used when Z snapping.'
##    UseSnapZTolerance = property(_get, _set, doc = _set.__doc__)
##

IFeatureSnapAgent._methods_ = [
    COMMETHOD(['propputref', helpstring(u'The featureclass the feature snap agent snaps to.')], HRESULT, 'FeatureClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass), 'featClass' )),
    COMMETHOD(['propget', helpstring(u'The featureclass the feature snap agent snaps to.')], HRESULT, 'FeatureClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeatureClass)), 'featClass' )),
    COMMETHOD(['propput', helpstring(u'The part of a geometry the feature snap agent snaps to.')], HRESULT, 'HitType',
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryHitPartType, 'HitType' )),
    COMMETHOD(['propget', helpstring(u'The part of a geometry the feature snap agent snaps to.')], HRESULT, 'HitType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryHitPartType), 'HitType' )),
    COMMETHOD(['propget', helpstring(u'The FeatureCache associated with the feature snap agent.')], HRESULT, 'FeatureCache',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IFeatureCache)), 'cache' )),
]
################################################################
## code template for IFeatureSnapAgent implementation
##class IFeatureSnapAgent_Impl(object):
##    def _get(self):
##        u'The part of a geometry the feature snap agent snaps to.'
##        #return HitType
##    def _set(self, HitType):
##        u'The part of a geometry the feature snap agent snaps to.'
##    HitType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FeatureCache(self):
##        u'The FeatureCache associated with the feature snap agent.'
##        #return cache
##
##    @property
##    def FeatureClass(self, featClass):
##        u'The featureclass the feature snap agent snaps to.'
##        #return 
##

IFeatureSnapAgent2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates whether this Agent will snap in Z.')], HRESULT, 'ZSnappingEnabled',
              ( ['in'], VARIANT_BOOL, 'zSnapEnabled' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether this Agent will snap in Z.')], HRESULT, 'ZSnappingEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'zSnapEnabled' )),
]
################################################################
## code template for IFeatureSnapAgent2 implementation
##class IFeatureSnapAgent2_Impl(object):
##    def _get(self):
##        u'Indicates whether this Agent will snap in Z.'
##        #return zSnapEnabled
##    def _set(self, zSnapEnabled):
##        u'Indicates whether this Agent will snap in Z.'
##    ZSnappingEnabled = property(_get, _set, doc = _set.__doc__)
##

ITraverseWindow._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if Traverse Window is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'vis' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Traverse Window is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'vis' )),
    COMMETHOD(['propget', helpstring(u'The specified start point of the traverse.')], HRESULT, 'StartPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'Start' )),
    COMMETHOD(['propget', helpstring(u'The specified end point of the traverse.')], HRESULT, 'FinishPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'Finish' )),
    COMMETHOD(['propget', helpstring(u'The number of courses in the traverse.')], HRESULT, 'CourseCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'A reference to the ith course.')], HRESULT, 'Course',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(ICourse)), 'Course' )),
    COMMETHOD(['propget', helpstring(u'The type of the course being added.')], HRESULT, 'CourseType',
              ( ['retval', 'out'], POINTER(esriCourseType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The type of the course being added.')], HRESULT, 'CourseType',
              ( ['in'], esriCourseType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the text in the ith measure is selected.')], HRESULT, 'MeasureSelected',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'sel' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the text in the ith measure is selected.')], HRESULT, 'MeasureSelected',
              ( ['in'], c_int, 'index' ),
              ( ['in'], VARIANT_BOOL, 'sel' )),
    COMMETHOD(['propget', helpstring(u'The ith value that defines the course to add.')], HRESULT, 'MeasureText',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'text' )),
    COMMETHOD(['propput', helpstring(u'The ith value that defines the course to add.')], HRESULT, 'MeasureText',
              ( ['in'], c_int, 'index' ),
              ( ['in'], BSTR, 'text' )),
    COMMETHOD(['propget', helpstring(u'The handle of the ith measure text control.')], HRESULT, 'MeasureHWND',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'HWND' )),
    COMMETHOD(['propget', helpstring(u'If the course type is esriCTCurve or esriCTTangentCurve, describes the type of curve paramater that the ith measure text represents.')], HRESULT, 'CurveParameter',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(esriCurveParameter), 'curveParam' )),
    COMMETHOD(['propput', helpstring(u'If the course type is esriCTCurve or esriCTTangentCurve, describes the type of curve paramater that the ith measure text represents.')], HRESULT, 'CurveParameter',
              ( ['in'], c_int, 'index' ),
              ( ['in'], esriCurveParameter, 'curveParam' )),
    COMMETHOD(['propget', helpstring(u'If the course type is esriCTCurve or esriCTTangentCurve, indicates if the curve turns to the left or right.')], HRESULT, 'TurnDirection',
              ( ['retval', 'out'], POINTER(esriTurnDirection), 'direction' )),
    COMMETHOD(['propput', helpstring(u'If the course type is esriCTCurve or esriCTTangentCurve, indicates if the curve turns to the left or right.')], HRESULT, 'TurnDirection',
              ( ['in'], esriTurnDirection, 'direction' )),
    COMMETHOD(['propget', helpstring(u'If the course type is esriCTCurve, defines the direction type of the curve.')], HRESULT, 'CurveDirectionType',
              ( ['retval', 'out'], POINTER(esriCurveDirectionType), 'direction' )),
    COMMETHOD(['propput', helpstring(u'If the course type is esriCTCurve, defines the direction type of the curve.')], HRESULT, 'CurveDirectionType',
              ( ['in'], esriCurveDirectionType, 'direction' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Add command on the Traverse Window dialog is enabled.')], HRESULT, 'IsAddEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Enabled' )),
    COMMETHOD([helpstring(u'Add the course that is defined by the current course parameters.')], HRESULT, 'Add'),
    COMMETHOD([helpstring(u'Change the focus to the ith measure text control.')], HRESULT, 'SetFocusToMeasure',
              ( ['in'], c_int, 'index' )),
]
################################################################
## code template for ITraverseWindow implementation
##class ITraverseWindow_Impl(object):
##    def _get(self):
##        u'The type of the course being added.'
##        #return Type
##    def _set(self, Type):
##        u'The type of the course being added.'
##    CourseType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FinishPoint(self):
##        u'The specified end point of the traverse.'
##        #return Finish
##
##    def _get(self):
##        u'Indicates if Traverse Window is visible.'
##        #return vis
##    def _set(self, vis):
##        u'Indicates if Traverse Window is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, index):
##        u'Indicates if the text in the ith measure is selected.'
##        #return sel
##    def _set(self, index, sel):
##        u'Indicates if the text in the ith measure is selected.'
##    MeasureSelected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CourseCount(self):
##        u'The number of courses in the traverse.'
##        #return Count
##
##    def SetFocusToMeasure(self, index):
##        u'Change the focus to the ith measure text control.'
##        #return 
##
##    @property
##    def Course(self, index):
##        u'A reference to the ith course.'
##        #return Course
##
##    def Add(self):
##        u'Add the course that is defined by the current course parameters.'
##        #return 
##
##    def _get(self):
##        u'If the course type is esriCTCurve or esriCTTangentCurve, indicates if the curve turns to the left or right.'
##        #return direction
##    def _set(self, direction):
##        u'If the course type is esriCTCurve or esriCTTangentCurve, indicates if the curve turns to the left or right.'
##    TurnDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, index):
##        u'The ith value that defines the course to add.'
##        #return text
##    def _set(self, index, text):
##        u'The ith value that defines the course to add.'
##    MeasureText = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'If the course type is esriCTCurve, defines the direction type of the curve.'
##        #return direction
##    def _set(self, direction):
##        u'If the course type is esriCTCurve, defines the direction type of the curve.'
##    CurveDirectionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, index):
##        u'If the course type is esriCTCurve or esriCTTangentCurve, describes the type of curve paramater that the ith measure text represents.'
##        #return curveParam
##    def _set(self, index, curveParam):
##        u'If the course type is esriCTCurve or esriCTTangentCurve, describes the type of curve paramater that the ith measure text represents.'
##    CurveParameter = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MeasureHWND(self, index):
##        u'The handle of the ith measure text control.'
##        #return HWND
##
##    @property
##    def StartPoint(self):
##        u'The specified start point of the traverse.'
##        #return Start
##
##    @property
##    def IsAddEnabled(self):
##        u'Indicates if the Add command on the Traverse Window dialog is enabled.'
##        #return Enabled
##

class MirrorFeaturesTool(CoClass):
    _reg_clsid_ = GUID('{36DD90C0-50B4-45E7-A240-F28A8102949D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
MirrorFeaturesTool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ITool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand, IShapeConstructorTool]

class IEditProperties3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to more members that control the properties of an edit session.'
    _iid_ = GUID('{2315D713-E21C-4BE1-93AF-F17624A051CC}')
    _idlflags_ = ['oleautomation']
IEditProperties3._methods_ = [
    COMMETHOD(['propget', helpstring(u'The multiuser session mode that is used when editing.')], HRESULT, 'MultiuserEditSessionMode',
              ( ['retval', 'out'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriMultiuserEditSessionMode), 'esm' )),
    COMMETHOD(['propput', helpstring(u'The multiuser session mode that is used when editing.')], HRESULT, 'MultiuserEditSessionMode',
              ( ['in'], comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.esriMultiuserEditSessionMode, 'esm' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the editor checks if conflicts were detected during auto reconciliation prior to automatically saving.')], HRESULT, 'AutoSaveChecksConflicts',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'checksConflicts' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the editor checks if conflicts were detected during auto reconciliation prior to automatically saving.')], HRESULT, 'AutoSaveChecksConflicts',
              ( ['in'], VARIANT_BOOL, 'checksConflicts' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether conflicts will be detected and resolved by attributes.')], HRESULT, 'AutoReconcileConflictsByAttribute',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'byatt' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether conflicts will be detected and resolved by attributes.')], HRESULT, 'AutoReconcileConflictsByAttribute',
              ( ['in'], VARIANT_BOOL, 'byatt' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether conflicts are resolved in favor of the edit session.')], HRESULT, 'AutoReconcileEditSessionWins',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'editWins' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether conflicts are resolved in favor of the edit session.')], HRESULT, 'AutoReconcileEditSessionWins',
              ( ['in'], VARIANT_BOOL, 'editWins' )),
]
################################################################
## code template for IEditProperties3 implementation
##class IEditProperties3_Impl(object):
##    def _get(self):
##        u'Indicates whether conflicts are resolved in favor of the edit session.'
##        #return editWins
##    def _set(self, editWins):
##        u'Indicates whether conflicts are resolved in favor of the edit session.'
##    AutoReconcileEditSessionWins = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The multiuser session mode that is used when editing.'
##        #return esm
##    def _set(self, esm):
##        u'The multiuser session mode that is used when editing.'
##    MultiuserEditSessionMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether conflicts will be detected and resolved by attributes.'
##        #return byatt
##    def _set(self, byatt):
##        u'Indicates whether conflicts will be detected and resolved by attributes.'
##    AutoReconcileConflictsByAttribute = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the editor checks if conflicts were detected during auto reconciliation prior to automatically saving.'
##        #return checksConflicts
##    def _set(self, checksConflicts):
##        u'Indicates whether the editor checks if conflicts were detected during auto reconciliation prior to automatically saving.'
##    AutoSaveChecksConflicts = property(_get, _set, doc = _set.__doc__)
##

class SketchStraightCommand(CoClass):
    u'Initializes a new StraightConstructor on the Editor.'
    _reg_clsid_ = GUID('{69DAD63E-3B9B-401D-84AE-27A84F720BB2}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchStraightCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

class Editor(CoClass):
    u'The Object Editor Extension.'
    _reg_clsid_ = GUID('{F8842F20-BB23-11D0-802B-0000F8037368}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class ISnapEnvironment3(ISnapEnvironment2):
    _case_insensitive_ = True
    u'Provides access to members used to manipulate the snap environment for contraints.'
    _iid_ = GUID('{013E7ACC-014A-40DF-B883-2FEC1694C979}')
    _idlflags_ = ['oleautomation']
class IEditProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the properties of an edit session.'
    _iid_ = GUID('{199B7810-B38E-11D1-846F-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
class IEditProperties2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to more members that control the properties of an edit session.'
    _iid_ = GUID('{44DDA459-DE7C-4AC0-98FF-ABB32A6D8669}')
    _idlflags_ = ['oleautomation']
class IEditProperties4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to more members that control the properties of an edit session.'
    _iid_ = GUID('{026CFEF7-33DD-4ADC-B12D-8C2BA25D60A1}')
    _idlflags_ = ['oleautomation']
class IEditAnnotationProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the annotation properties of an edit session.'
    _iid_ = GUID('{7B3B76DF-D88D-4940-A388-842F253982B7}')
    _idlflags_ = ['oleautomation']
class IEditAttributeProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the short transaction attribute properties of an edit session.'
    _iid_ = GUID('{7D5464CB-6B99-46AC-8626-C215353B741C}')
    _idlflags_ = ['oleautomation']
Editor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IEditor, IEditor2, IEditor3, IEditSketch, IEditSketch2, IEditSketch3, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IActiveViewEvents, ISnapEnvironment, ISnapEnvironment2, ISnapEnvironment3, IEditLayers, IEditProperties, IEditProperties2, IEditProperties3, IEditProperties4, IAttributeTransferType, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtensionManager, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtensionAccelerators, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersist, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IPersistStream, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, IEditAnnotationProperties, IEditAttributeProperties, IEditTaskSearch, IEditorZ]
Editor._outgoing_interfaces_ = [IEditEvents, IEditEvents2, IEditEvents3, IEditEvents4, IEditEvents5]

class SketchPointCommand(CoClass):
    u'Initializes a new PointConstructor on the Editor.'
    _reg_clsid_ = GUID('{67E44603-D2D6-46A5-A941-F311C71690B1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchPointCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

class SketchBezierCurveCommand(CoClass):
    u'Initializes a new BezierCurveConstructor on the Editor.'
    _reg_clsid_ = GUID('{CE2B413E-240C-4052-926A-C5BB39A98C29}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchBezierCurveCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

class ITraverseAdjustment(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that perform adjustment computations.'
    _iid_ = GUID('{496E87C0-2964-4596-95B3-AD5D6CDF8DBE}')
    _idlflags_ = ['oleautomation']
ITraverseAdjustment._methods_ = [
    COMMETHOD([helpstring(u'Performs the specified adjustment computation on the geometry.')], HRESULT, 'CalculateAdjustment',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolyline), 'polyline' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pEnd' ),
              ( ['in'], esriAdjustmentType, 'adjustmentType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolyline)), 'adjPolyline' )),
    COMMETHOD([helpstring(u'Caculates the closure for the .')], HRESULT, 'CalculateClosure',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPolyline), 'polyline' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'pEnd' ),
              ( ['retval', 'out'], POINTER(POINTER(ITraverseClosure)), 'closure' )),
]
################################################################
## code template for ITraverseAdjustment implementation
##class ITraverseAdjustment_Impl(object):
##    def CalculateClosure(self, polyline, pEnd):
##        u'Caculates the closure for the .'
##        #return closure
##
##    def CalculateAdjustment(self, polyline, pEnd, adjustmentType):
##        u'Performs the specified adjustment computation on the geometry.'
##        #return adjPolyline
##

class ReplaceGeometryTool(CoClass):
    _reg_clsid_ = GUID('{BA45D6A9-FDB5-4D3D-BFEE-BC82C73373E1}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
ReplaceGeometryTool._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ITool, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand, IShapeConstructorTool]

class SketchMidpointCommand(CoClass):
    u'Initializes a new MidpointConstructor on the Editor.'
    _reg_clsid_ = GUID('{2076F45A-D01F-4F14-B2C3-E2E62C536013}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchMidpointCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

class SketchEndPointArcCommand(CoClass):
    u'Initializes a new EndPointConstructor on the Editor.'
    _reg_clsid_ = GUID('{3FC9A697-11BA-4739-BE6A-31F30EE28123}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchEndPointArcCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

IEditProperties2._methods_ = [
    COMMETHOD(['propget', helpstring(u'Controls the sticky move tolerance.')], HRESULT, 'StickyMoveTolerance',
              ( ['retval', 'out'], POINTER(c_int), 'tol' )),
    COMMETHOD(['propput', helpstring(u'Controls the sticky move tolerance.')], HRESULT, 'StickyMoveTolerance',
              ( ['in'], c_int, 'tol' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to show the snap tips.')], HRESULT, 'SnapTips',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'tips' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to show the snap tips.')], HRESULT, 'SnapTips',
              ( ['in'], VARIANT_BOOL, 'tips' )),
    COMMETHOD(['propput', helpstring(u'Precision used to display angular units.')], HRESULT, 'AngularUnitPrecision',
              ( ['in'], c_int, 'auPrecision' )),
    COMMETHOD(['propget', helpstring(u'Precision used to display angular units.')], HRESULT, 'AngularUnitPrecision',
              ( ['retval', 'out'], POINTER(c_int), 'auPrecision' )),
    COMMETHOD(['propput', helpstring(u'Direction Type.')], HRESULT, 'DirectionType',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDirectionType, 'dirType' )),
    COMMETHOD(['propget', helpstring(u'Direction Type.')], HRESULT, 'DirectionType',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDirectionType), 'dirType' )),
    COMMETHOD(['propput', helpstring(u'Direction Units.')], HRESULT, 'DirectionUnits',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDirectionUnits, 'dirUnits' )),
    COMMETHOD(['propget', helpstring(u'Direction Units.')], HRESULT, 'DirectionUnits',
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.esriDirectionUnits), 'dirUnits' )),
    COMMETHOD(['propput', helpstring(u'Distance Correction Factor.')], HRESULT, 'DistanceCorrectionFactor',
              ( ['in'], c_double, 'distFactor' )),
    COMMETHOD(['propget', helpstring(u'Distance Correction Factor.')], HRESULT, 'DistanceCorrectionFactor',
              ( ['retval', 'out'], POINTER(c_double), 'distFactor' )),
    COMMETHOD(['propput', helpstring(u'Angular Correction Offset.')], HRESULT, 'AngularCorrectionOffset',
              ( ['in'], c_double, 'angOffset' )),
    COMMETHOD(['propget', helpstring(u'Angular Correction Offset.')], HRESULT, 'AngularCorrectionOffset',
              ( ['retval', 'out'], POINTER(c_double), 'angOffset' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether to use Ground to Grid.')], HRESULT, 'UseGroundToGrid',
              ( ['in'], VARIANT_BOOL, 'g2g' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether to use Ground to Grid.')], HRESULT, 'UseGroundToGrid',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'g2g' )),
]
################################################################
## code template for IEditProperties2 implementation
##class IEditProperties2_Impl(object):
##    def _get(self):
##        u'Direction Units.'
##        #return dirUnits
##    def _set(self, dirUnits):
##        u'Direction Units.'
##    DirectionUnits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Precision used to display angular units.'
##        #return auPrecision
##    def _set(self, auPrecision):
##        u'Precision used to display angular units.'
##    AngularUnitPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Controls the sticky move tolerance.'
##        #return tol
##    def _set(self, tol):
##        u'Controls the sticky move tolerance.'
##    StickyMoveTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Distance Correction Factor.'
##        #return distFactor
##    def _set(self, distFactor):
##        u'Distance Correction Factor.'
##    DistanceCorrectionFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Direction Type.'
##        #return dirType
##    def _set(self, dirType):
##        u'Direction Type.'
##    DirectionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Angular Correction Offset.'
##        #return angOffset
##    def _set(self, angOffset):
##        u'Angular Correction Offset.'
##    AngularCorrectionOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to use Ground to Grid.'
##        #return g2g
##    def _set(self, g2g):
##        u'Indicates whether to use Ground to Grid.'
##    UseGroundToGrid = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether to show the snap tips.'
##        #return tips
##    def _set(self, tips):
##        u'Indicates whether to show the snap tips.'
##    SnapTips = property(_get, _set, doc = _set.__doc__)
##

IEditEvents._methods_ = [
    COMMETHOD([helpstring(u'Called when the selection changes.')], HRESULT, 'OnSelectionChanged'),
    COMMETHOD([helpstring(u'Called when the current layer changes.')], HRESULT, 'OnCurrentLayerChanged'),
    COMMETHOD([helpstring(u'Called when the current task changes.')], HRESULT, 'OnCurrentTaskChanged'),
    COMMETHOD([helpstring(u'Called when the edit sketch is modified.')], HRESULT, 'OnSketchModified'),
    COMMETHOD([helpstring(u'Called when the edit sketch is finished.')], HRESULT, 'OnSketchFinished'),
    COMMETHOD([helpstring(u'Called after the edit sketch is drawn.')], HRESULT, 'AfterDrawSketch',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplay), 'pDpy' )),
    COMMETHOD([helpstring(u'Called when editing begins.')], HRESULT, 'OnStartEditing'),
    COMMETHOD([helpstring(u'Called when editing ends.')], HRESULT, 'OnStopEditing',
              ( ['in'], VARIANT_BOOL, 'save' )),
    COMMETHOD([helpstring(u'Called when editing conflicts are detected during save.')], HRESULT, 'OnConflictsDetected'),
    COMMETHOD([helpstring(u'Called when UndoOperation is called.')], HRESULT, 'OnUndo'),
    COMMETHOD([helpstring(u'Called when RedoOperation is called.')], HRESULT, 'OnRedo'),
    COMMETHOD([helpstring(u'Called when new features are created.')], HRESULT, 'OnCreateFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObject), 'obj' )),
    COMMETHOD([helpstring(u'Called when features are modified.')], HRESULT, 'OnChangeFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObject), 'obj' )),
    COMMETHOD([helpstring(u'Called when features are deleted.')], HRESULT, 'OnDeleteFeature',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObject), 'obj' )),
]
################################################################
## code template for IEditEvents implementation
##class IEditEvents_Impl(object):
##    def OnRedo(self):
##        u'Called when RedoOperation is called.'
##        #return 
##
##    def OnCreateFeature(self, obj):
##        u'Called when new features are created.'
##        #return 
##
##    def OnStartEditing(self):
##        u'Called when editing begins.'
##        #return 
##
##    def OnUndo(self):
##        u'Called when UndoOperation is called.'
##        #return 
##
##    def OnSketchModified(self):
##        u'Called when the edit sketch is modified.'
##        #return 
##
##    def OnCurrentTaskChanged(self):
##        u'Called when the current task changes.'
##        #return 
##
##    def OnChangeFeature(self, obj):
##        u'Called when features are modified.'
##        #return 
##
##    def OnConflictsDetected(self):
##        u'Called when editing conflicts are detected during save.'
##        #return 
##
##    def OnCurrentLayerChanged(self):
##        u'Called when the current layer changes.'
##        #return 
##
##    def OnSelectionChanged(self):
##        u'Called when the selection changes.'
##        #return 
##
##    def OnSketchFinished(self):
##        u'Called when the edit sketch is finished.'
##        #return 
##
##    def OnDeleteFeature(self, obj):
##        u'Called when features are deleted.'
##        #return 
##
##    def OnStopEditing(self, save):
##        u'Called when editing ends.'
##        #return 
##
##    def AfterDrawSketch(self, pDpy):
##        u'Called after the edit sketch is drawn.'
##        #return 
##

class ISnappingWindow(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods for working with the snapping window.'
    _iid_ = GUID('{4FBA6194-EDED-11D2-9F2B-00C04F6BC979}')
    _idlflags_ = ['oleautomation']
ISnappingWindow._methods_ = [
    COMMETHOD([helpstring(u'Shows the window.')], HRESULT, 'Show'),
    COMMETHOD([helpstring(u'Hides the window.')], HRESULT, 'Hide'),
    COMMETHOD([helpstring(u'Refreshes the contents.')], HRESULT, 'RefreshContents'),
]
################################################################
## code template for ISnappingWindow implementation
##class ISnappingWindow_Impl(object):
##    def RefreshContents(self):
##        u'Refreshes the contents.'
##        #return 
##
##    def Hide(self):
##        u'Hides the window.'
##        #return 
##
##    def Show(self):
##        u'Shows the window.'
##        #return 
##

class SketchAngleDistanceCommand(CoClass):
    u'Initializes a new AngleDistanceConstructor on the Editor.'
    _reg_clsid_ = GUID('{86BF0063-915D-4E61-8E39-01BC00E13A85}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchAngleDistanceCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

class ISketchTool(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the main sketch tool.'
    _iid_ = GUID('{014EE842-A498-11D1-846B-0000F875B9C6}')
    _idlflags_ = ['oleautomation']
ISketchTool._methods_ = [
    COMMETHOD(['propget', helpstring(u'The anchor of the sketch.')], HRESULT, 'Anchor',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'Anchor' )),
    COMMETHOD(['propget', helpstring(u'The current location of the mouse.')], HRESULT, 'Location',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'loc' )),
    COMMETHOD(['propget', helpstring(u'The sketch constraint.')], HRESULT, 'Constraint',
              ( ['retval', 'out'], POINTER(esriSketchConstraint), 'Constraint' )),
    COMMETHOD(['propput', helpstring(u'The sketch constraint.')], HRESULT, 'Constraint',
              ( ['in'], esriSketchConstraint, 'Constraint' )),
    COMMETHOD(['propget', helpstring(u"The sketch's angular constraint.")], HRESULT, 'AngleConstraint',
              ( ['retval', 'out'], POINTER(c_double), 'val' )),
    COMMETHOD(['propput', helpstring(u"The sketch's angular constraint.")], HRESULT, 'AngleConstraint',
              ( ['in'], c_double, 'val' )),
    COMMETHOD(['propget', helpstring(u"The sketch's distance constraint.")], HRESULT, 'DistanceConstraint',
              ( ['retval', 'out'], POINTER(c_double), 'val' )),
    COMMETHOD(['propput', helpstring(u"The sketch's distance constraint.")], HRESULT, 'DistanceConstraint',
              ( ['in'], c_double, 'val' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether stream mode digitizing is enabled.')], HRESULT, 'IsStreaming',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'IsStreaming' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether stream mode digitizing is enabled.')], HRESULT, 'IsStreaming',
              ( ['in'], VARIANT_BOOL, 'IsStreaming' )),
    COMMETHOD([helpstring(u'Adds a point to the sketch.')], HRESULT, 'AddPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['in'], VARIANT_BOOL, 'Clone' ),
              ( ['in'], VARIANT_BOOL, 'allowUndo' )),
]
################################################################
## code template for ISketchTool implementation
##class ISketchTool_Impl(object):
##    def AddPoint(self, point, Clone, allowUndo):
##        u'Adds a point to the sketch.'
##        #return 
##
##    def _get(self):
##        u'The sketch constraint.'
##        #return Constraint
##    def _set(self, Constraint):
##        u'The sketch constraint.'
##    Constraint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u"The sketch's distance constraint."
##        #return val
##    def _set(self, val):
##        u"The sketch's distance constraint."
##    DistanceConstraint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether stream mode digitizing is enabled.'
##        #return IsStreaming
##    def _set(self, IsStreaming):
##        u'Indicates whether stream mode digitizing is enabled.'
##    IsStreaming = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Location(self):
##        u'The current location of the mouse.'
##        #return loc
##
##    @property
##    def Anchor(self):
##        u'The anchor of the sketch.'
##        #return Anchor
##
##    def _get(self):
##        u"The sketch's angular constraint."
##        #return val
##    def _set(self, val):
##        u"The sketch's angular constraint."
##    AngleConstraint = property(_get, _set, doc = _set.__doc__)
##

class IDistanceConverter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to methods that allow a distance to be converted from one unit system to another.'
    _iid_ = GUID('{26384D1E-5ABC-42C9-A3B8-87C915FEEFB5}')
    _idlflags_ = ['oleautomation']
IDistanceConverter._methods_ = [
    COMMETHOD([helpstring(u'Converts the string value to a double.')], HRESULT, 'GetValue',
              ( ['in'], BSTR, 'val' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ISpatialReference), 'pUnits' ),
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
]
################################################################
## code template for IDistanceConverter implementation
##class IDistanceConverter_Impl(object):
##    def GetValue(self, val, pUnits):
##        u'Converts the string value to a double.'
##        #return pVal
##

class UnplacedAnnotationWindow(CoClass):
    u'Esri unplaced anno window.'
    _reg_clsid_ = GUID('{ED9E9DB5-DA3E-46BF-A554-AEDC491DD123}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
UnplacedAnnotationWindow._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IDockableWindowDef, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IDockableWindowImageDef, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IDockableWindowInitialPlacement, comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IActiveViewEvents, IEditEvents, IEditEvents2, comtypes.gen._866AE5D3_530C_11D2_A2BD_0000F8774FB5_0_10_2.IAcceleratorHook]

class IDistanceConverter2(IDistanceConverter):
    _case_insensitive_ = True
    u'Provides access to methods that allow a distance to be converted from one linear unit to another.'
    _iid_ = GUID('{05907BD0-C396-457D-9582-874AC2C0A5CB}')
    _idlflags_ = ['oleautomation']
IDistanceConverter2._methods_ = [
    COMMETHOD([helpstring(u'Converts the string value to the given desired linear unit.')], HRESULT, 'GetValueForLinearUnit',
              ( ['in'], BSTR, 'val' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.ILinearUnit), 'pUnit' ),
              ( ['retval', 'out'], POINTER(c_double), 'pVal' )),
]
################################################################
## code template for IDistanceConverter2 implementation
##class IDistanceConverter2_Impl(object):
##    def GetValueForLinearUnit(self, val, pUnit):
##        u'Converts the string value to the given desired linear unit.'
##        #return pVal
##

class SketchDistanceDistanceCommand(CoClass):
    u'Initializes a new DistanceDistanceConstructor on the Editor.'
    _reg_clsid_ = GUID('{B711A20C-94C4-46D8-AD2B-771AE65FA35D}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchDistanceDistanceCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

IEditAttributeProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the attribute query for newly created features is enabled.')], HRESULT, 'NonversionedAttributionEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFlag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the attribute query for newly created features is enabled.')], HRESULT, 'NonversionedAttributionEnabled',
              ( ['in'], VARIANT_BOOL, 'pFlag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the pre-populate attributes dialog is used for all layers or just the selected layers.')], HRESULT, 'AttributeEditAll',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pFlag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the pre-populate attributes dialog is used for all layers or just the selected layers.')], HRESULT, 'AttributeEditAll',
              ( ['in'], VARIANT_BOOL, 'pFlag' )),
    COMMETHOD(['propget', helpstring(u'The list of applicable feature classes.')], HRESULT, 'AttributeEditClasses',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet)), 'ppClasses' )),
    COMMETHOD(['propputref', helpstring(u'The list of applicable feature classes.')], HRESULT, 'AttributeEditClasses',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISet), 'ppClasses' )),
]
################################################################
## code template for IEditAttributeProperties implementation
##class IEditAttributeProperties_Impl(object):
##    def _get(self):
##        u'Indicates if the attribute query for newly created features is enabled.'
##        #return pFlag
##    def _set(self, pFlag):
##        u'Indicates if the attribute query for newly created features is enabled.'
##    NonversionedAttributionEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def AttributeEditClasses(self, ppClasses):
##        u'The list of applicable feature classes.'
##        #return 
##
##    def _get(self):
##        u'Indicates if the pre-populate attributes dialog is used for all layers or just the selected layers.'
##        #return pFlag
##    def _set(self, pFlag):
##        u'Indicates if the pre-populate attributes dialog is used for all layers or just the selected layers.'
##    AttributeEditAll = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'esriEditorError'
E_EDITOR_CANTEDITAIWORKSPACE = -2147220990
esriEditorError = c_int # enum
class AnnotationConstructionWindow(CoClass):
    u'The Annotation Construction Window.'
    _reg_clsid_ = GUID('{672C5745-0DA8-4ADD-8AF6-17C56DAE75EE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
AnnotationConstructionWindow._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationConstructionWindow, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension]

IEditSelectionCache._methods_ = [
    COMMETHOD([helpstring(u"Initializes the cache using the editor's selection.")], HRESULT, 'Initialize',
              ( ['in'], POINTER(IEditor), 'Editor' ),
              ( ['in'], c_int, 'sizePixels' )),
    COMMETHOD([helpstring(u'Tests if the location is over the selection or not.')], HRESULT, 'HitTest',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'loc' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'hit' )),
]
################################################################
## code template for IEditSelectionCache implementation
##class IEditSelectionCache_Impl(object):
##    def Initialize(self, Editor, sizePixels):
##        u"Initializes the cache using the editor's selection."
##        #return 
##
##    def HitTest(self, loc):
##        u'Tests if the location is over the selection or not.'
##        #return hit
##

class StretchProportionalCommand(CoClass):
    _reg_clsid_ = GUID('{302D3E0E-827C-4D2A-9244-74EFE1CE2CEE}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
StretchProportionalCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

IEditTask._methods_ = [
    COMMETHOD(['propget', helpstring(u'The name of the edit task.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD([helpstring(u'Called by the editor when the task becomes active.')], HRESULT, 'Activate',
              ( ['in'], POINTER(IEditor), 'Editor' ),
              ( ['in'], POINTER(IEditTask), 'oldTask' )),
    COMMETHOD([helpstring(u'Called by the editor when the task becomes inactive.')], HRESULT, 'Deactivate'),
    COMMETHOD([helpstring(u'Notifies the task that the edit sketch is complete.')], HRESULT, 'OnFinishSketch'),
    COMMETHOD([helpstring(u'Notifies the task that the edit sketch has been deleted.')], HRESULT, 'OnDeleteSketch'),
]
################################################################
## code template for IEditTask implementation
##class IEditTask_Impl(object):
##    def Deactivate(self):
##        u'Called by the editor when the task becomes inactive.'
##        #return 
##
##    def OnDeleteSketch(self):
##        u'Notifies the task that the edit sketch has been deleted.'
##        #return 
##
##    def Activate(self, Editor, oldTask):
##        u'Called by the editor when the task becomes active.'
##        #return 
##
##    def OnFinishSketch(self):
##        u'Notifies the task that the edit sketch is complete.'
##        #return 
##
##    @property
##    def Name(self):
##        u'The name of the edit task.'
##        #return Name
##

class AnnotationEditExtension(CoClass):
    u'An editor extension for creating and editing annotation features.'
    _reg_clsid_ = GUID('{27F8C2D0-5F13-44E9-8608-490DAB987F95}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
class IAnnotationEditExtension(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control annotation feature editing.'
    _iid_ = GUID('{3F6FF309-1391-447B-9EBC-2645BD88565E}')
    _idlflags_ = ['oleautomation']
AnnotationEditExtension._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension, IAnnotationEditExtension, IEditSketchExtension, IEditSketchExtension2, IEditEvents, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo, IEditEvents2]

class Library(object):
    u'Esri Editor Object Library 10.2'
    name = u'esriEditor'
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)

class TraverseAdjustment(CoClass):
    u'Performs Traverse Adjustment Calculations.'
    _reg_clsid_ = GUID('{54DCF6C8-3F84-461B-81BF-5FA178331096}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
TraverseAdjustment._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, ITraverseAdjustment]

class IProtectNameEditor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to dummy methods protecting name correctness.'
    _iid_ = GUID('{DFF35A54-99AF-4B02-A32E-D04DA55DF459}')
    _idlflags_ = []
IProtectNameEditor._methods_ = [
    COMMETHOD([], HRESULT, 'ProtectOLE_HANDLE',
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'aHandle' )),
    COMMETHOD([], HRESULT, 'ProtectOLE_COLOR',
              ( [], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_COLOR, 'aColor' )),
]
################################################################
## code template for IProtectNameEditor implementation
##class IProtectNameEditor_Impl(object):
##    def ProtectOLE_COLOR(self, aColor):
##        '-no docstring-'
##        #return 
##
##    def ProtectOLE_HANDLE(self, aHandle):
##        '-no docstring-'
##        #return 
##

IEditProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Controls the number of decimal places the editor reports numbers with.')], HRESULT, 'ReportPrecision',
              ( ['retval', 'out'], POINTER(c_int), 'numDecs' )),
    COMMETHOD(['propput', helpstring(u'Controls the number of decimal places the editor reports numbers with.')], HRESULT, 'ReportPrecision',
              ( ['in'], c_int, 'numDecs' )),
    COMMETHOD(['propget', helpstring(u'Controls the streaming tolerance, measured in map units.')], HRESULT, 'StreamTolerance',
              ( ['retval', 'out'], POINTER(c_double), 'tol' )),
    COMMETHOD(['propput', helpstring(u'Controls the streaming tolerance, measured in map units.')], HRESULT, 'StreamTolerance',
              ( ['in'], c_double, 'tol' )),
    COMMETHOD(['propget', helpstring(u'Controls the number of points to group together when streaming.')], HRESULT, 'StreamGroupingCount',
              ( ['retval', 'out'], POINTER(c_int), 'tol' )),
    COMMETHOD(['propput', helpstring(u'Controls the number of points to group together when streaming.')], HRESULT, 'StreamGroupingCount',
              ( ['in'], c_int, 'tol' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the edit sketch is stretched when one of its vertices is moved.')], HRESULT, 'StretchGeometry',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'stretch' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the edit sketch is stretched when one of its vertices is moved.')], HRESULT, 'StretchGeometry',
              ( ['in'], VARIANT_BOOL, 'stretch' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the lines of the edit sketch.')], HRESULT, 'SketchSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol)), 'symbol' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to draw the lines of the edit sketch.')], HRESULT, 'SketchSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ILineSymbol), 'symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the vertices of the edit sketch.')], HRESULT, 'SketchVertexSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'symbol' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to draw the vertices of the edit sketch.')], HRESULT, 'SketchVertexSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the active vertex of the edit sketch.')], HRESULT, 'SelectedVertexSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'symbol' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to draw the active vertex of the edit sketch.')], HRESULT, 'SelectedVertexSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the snap location.')], HRESULT, 'SnapSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'symbol' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to draw the snap location.')], HRESULT, 'SnapSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'symbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the stop editing process should automatically reconcile an edit session and save the version without notification.')], HRESULT, 'AutoSaveOnVersionRedefined',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'stretch' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the stop editing process should automatically reconcile an edit session and save the version without notification.')], HRESULT, 'AutoSaveOnVersionRedefined',
              ( ['in'], VARIANT_BOOL, 'stretch' )),
]
################################################################
## code template for IEditProperties implementation
##class IEditProperties_Impl(object):
##    def SketchSymbol(self, symbol):
##        u'Symbol used to draw the lines of the edit sketch.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the stop editing process should automatically reconcile an edit session and save the version without notification.'
##        #return stretch
##    def _set(self, stretch):
##        u'Indicates whether the stop editing process should automatically reconcile an edit session and save the version without notification.'
##    AutoSaveOnVersionRedefined = property(_get, _set, doc = _set.__doc__)
##
##    def SnapSymbol(self, symbol):
##        u'Symbol used to draw the snap location.'
##        #return 
##
##    def SketchVertexSymbol(self, symbol):
##        u'Symbol used to draw the vertices of the edit sketch.'
##        #return 
##
##    def SelectedVertexSymbol(self, symbol):
##        u'Symbol used to draw the active vertex of the edit sketch.'
##        #return 
##
##    def _get(self):
##        u'Controls the number of decimal places the editor reports numbers with.'
##        #return numDecs
##    def _set(self, numDecs):
##        u'Controls the number of decimal places the editor reports numbers with.'
##    ReportPrecision = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Controls the streaming tolerance, measured in map units.'
##        #return tol
##    def _set(self, tol):
##        u'Controls the streaming tolerance, measured in map units.'
##    StreamTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the edit sketch is stretched when one of its vertices is moved.'
##        #return stretch
##    def _set(self, stretch):
##        u'Indicates if the edit sketch is stretched when one of its vertices is moved.'
##    StretchGeometry = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Controls the number of points to group together when streaming.'
##        #return tol
##    def _set(self, tol):
##        u'Controls the number of points to group together when streaming.'
##    StreamGroupingCount = property(_get, _set, doc = _set.__doc__)
##

class DimensionEditExtension(CoClass):
    u'An editor extension for creating and editing dimension features.'
    _reg_clsid_ = GUID('{8B96B86F-EE07-11D3-9F7A-00C04F6BDDD9}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
DimensionEditExtension._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.IExtension, IDimensionEditExtension, IEditEvents, IEditEvents2, IEditSketchExtension, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class SketchArcCommand(CoClass):
    u'Initializes a new ArcConstructor on the Editor.'
    _reg_clsid_ = GUID('{C92C154C-43DC-438C-9DE0-A9766DE35301}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchArcCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

IExtendedObjectInspector._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates if the object inspector is under a non-versioned editing model and to not start or stop edit operations as an edit operation is currently in effect.')], HRESULT, 'DisableEditOperations',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pDisableEditOperations' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the object inspector is under a non-versioned editing model and to not start or stop edit operations as an edit operation is currently in effect.')], HRESULT, 'DisableEditOperations',
              ( ['in'], VARIANT_BOOL, 'pDisableEditOperations' )),
]
################################################################
## code template for IExtendedObjectInspector implementation
##class IExtendedObjectInspector_Impl(object):
##    def _get(self):
##        u'Indicates if the object inspector is under a non-versioned editing model and to not start or stop edit operations as an edit operation is currently in effect.'
##        #return pDisableEditOperations
##    def _set(self, pDisableEditOperations):
##        u'Indicates if the object inspector is under a non-versioned editing model and to not start or stop edit operations as an edit operation is currently in effect.'
##    DisableEditOperations = property(_get, _set, doc = _set.__doc__)
##

class ISnapAgentCategory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to the categories of SnapAgents.'
    _iid_ = GUID('{D26A4AC5-6BDA-483C-B39D-6562D08D45CC}')
    _idlflags_ = ['oleautomation']
ISnapAgentCategory._methods_ = [
    COMMETHOD(['propget', helpstring(u'The Snap Agent category.')], HRESULT, 'Category',
              ( ['retval', 'out'], POINTER(BSTR), 'text' )),
]
################################################################
## code template for ISnapAgentCategory implementation
##class ISnapAgentCategory_Impl(object):
##    @property
##    def Category(self):
##        u'The Snap Agent category.'
##        #return text
##

IEditProperties4._methods_ = [
    COMMETHOD(['propget', helpstring(u'Indicates whether the sketch is drawn with WYSIWYG symbology.')], HRESULT, 'UseWYSIWYGSketchSymbol',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'UseWYSIWYGSketchSymbol' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the sketch is drawn with WYSIWYG symbology.')], HRESULT, 'UseWYSIWYGSketchSymbol',
              ( ['in'], VARIANT_BOOL, 'UseWYSIWYGSketchSymbol' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the classic editing snapping will be used.')], HRESULT, 'ClassicSnapping',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Snap' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the classic editing snapping will be used.')], HRESULT, 'ClassicSnapping',
              ( ['in'], VARIANT_BOOL, 'Snap' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the sketch will be added to the snapping cache.  It is used when not using classic snapping.')], HRESULT, 'SnapToSketch',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Snap' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the sketch will be added to the snapping cache.  It is used when not using classic snapping.')], HRESULT, 'SnapToSketch',
              ( ['in'], VARIANT_BOOL, 'Snap' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether construction toolbars will be displayed while drawing a sketch.')], HRESULT, 'ShowConstructionToolbars',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ShowConstructionToolbars' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether construction toolbars will be displayed while drawing a sketch.')], HRESULT, 'ShowConstructionToolbars',
              ( ['in'], VARIANT_BOOL, 'ShowConstructionToolbars' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the selected vertices of the edit sketch.')], HRESULT, 'ActiveSketchVertexSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'symbol' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to draw the selected vertices of the edit sketch.')], HRESULT, 'ActiveSketchVertexSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'symbol' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw the selected active vertex of the edit sketch.')], HRESULT, 'ActiveSelectedVertexSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol)), 'symbol' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to draw the selected active vertex of the edit sketch.')], HRESULT, 'ActiveSelectedVertexSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IMarkerSymbol), 'symbol' )),
]
################################################################
## code template for IEditProperties4 implementation
##class IEditProperties4_Impl(object):
##    def ActiveSelectedVertexSymbol(self, symbol):
##        u'Symbol used to draw the selected active vertex of the edit sketch.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the sketch will be added to the snapping cache.  It is used when not using classic snapping.'
##        #return Snap
##    def _set(self, Snap):
##        u'Indicates whether the sketch will be added to the snapping cache.  It is used when not using classic snapping.'
##    SnapToSketch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether construction toolbars will be displayed while drawing a sketch.'
##        #return ShowConstructionToolbars
##    def _set(self, ShowConstructionToolbars):
##        u'Indicates whether construction toolbars will be displayed while drawing a sketch.'
##    ShowConstructionToolbars = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the sketch is drawn with WYSIWYG symbology.'
##        #return UseWYSIWYGSketchSymbol
##    def _set(self, UseWYSIWYGSketchSymbol):
##        u'Indicates whether the sketch is drawn with WYSIWYG symbology.'
##    UseWYSIWYGSketchSymbol = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the classic editing snapping will be used.'
##        #return Snap
##    def _set(self, Snap):
##        u'Indicates whether the classic editing snapping will be used.'
##    ClassicSnapping = property(_get, _set, doc = _set.__doc__)
##
##    def ActiveSketchVertexSymbol(self, symbol):
##        u'Symbol used to draw the selected vertices of the edit sketch.'
##        #return 
##

class IFieldMap(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the behavior of the field mapping tools.'
    _iid_ = GUID('{FDBBEE91-1689-4B49-B29F-287602E70BBC}')
    _idlflags_ = ['oleautomation']
IFieldMap._methods_ = [
    COMMETHOD(['propputref', helpstring(u'Source class (required) for field mapping.')], HRESULT, 'SourceClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClass), 'ppSourceTable' )),
    COMMETHOD(['propget', helpstring(u'Source class (required) for field mapping.')], HRESULT, 'SourceClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClass)), 'ppSourceTable' )),
    COMMETHOD(['propputref', helpstring(u'Target class (required) for field mapping.')], HRESULT, 'TargetClass',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClass), 'ppTargetTable' )),
    COMMETHOD(['propget', helpstring(u'Target class (required) for field mapping.')], HRESULT, 'TargetClass',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClass)), 'ppTargetTable' )),
    COMMETHOD([helpstring(u'Establishes a field mapping between the source and target fields.')], HRESULT, 'SetFieldMap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField), 'pSourceField' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField), 'pTargetField' )),
    COMMETHOD([helpstring(u'Delete an individual field map (source or destination).')], HRESULT, 'DeleteFieldMap',
              ( ['in'], VARIANT_BOOL, 'sourceLayer' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField), 'pField' )),
    COMMETHOD(['propget', helpstring(u'Enum of field maps.')], HRESULT, 'FieldMap',
              ( ['retval', 'out'], POINTER(POINTER(IEnumFieldMap)), 'ppEnumFieldMap' )),
    COMMETHOD([helpstring(u'The source field for the provided target field.')], HRESULT, 'GetSourceField',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField), 'pTargetField' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField)), 'ppSourceField' )),
    COMMETHOD([helpstring(u'The target field for the provided source field.')], HRESULT, 'GetTargetField',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField), 'pSourceField' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField)), 'ppTargetField' )),
    COMMETHOD(['propget', helpstring(u'Indicates if any field mappings have been set.')], HRESULT, 'IsEmpty',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pIsEmpty' )),
]
################################################################
## code template for IFieldMap implementation
##class IFieldMap_Impl(object):
##    def DeleteFieldMap(self, sourceLayer, pField):
##        u'Delete an individual field map (source or destination).'
##        #return 
##
##    def SetFieldMap(self, pSourceField, pTargetField):
##        u'Establishes a field mapping between the source and target fields.'
##        #return 
##
##    @property
##    def FieldMap(self):
##        u'Enum of field maps.'
##        #return ppEnumFieldMap
##
##    def GetTargetField(self, pSourceField):
##        u'The target field for the provided source field.'
##        #return ppTargetField
##
##    @property
##    def IsEmpty(self):
##        u'Indicates if any field mappings have been set.'
##        #return pIsEmpty
##
##    @property
##    def TargetClass(self, ppTargetTable):
##        u'Target class (required) for field mapping.'
##        #return 
##
##    @property
##    def SourceClass(self, ppSourceTable):
##        u'Source class (required) for field mapping.'
##        #return 
##
##    def GetSourceField(self, pTargetField):
##        u'The source field for the provided target field.'
##        #return ppSourceField
##

IEditAnnotationProperties._methods_ = [
    COMMETHOD(['propget', helpstring(u'Symbol used to draw a leader.')], HRESULT, 'LeaderSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ICallout)), 'callout' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to draw a leader.')], HRESULT, 'LeaderSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ICallout), 'callout' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the edit annotation tool will show the resize and rotate handles.')], HRESULT, 'ShowAnnoHandles',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the edit annotation tool will show the resize and rotate handles.')], HRESULT, 'ShowAnnoHandles',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the edit annotation tool will use follow feature mode when moving annotation related to lines.')], HRESULT, 'UseFollowLineFeatureMode',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the edit annotation tool will use follow feature mode when moving annotation related to lines.')], HRESULT, 'UseFollowLineFeatureMode',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates whether the edit annotation tool will use follow feature mode when moving annotation related to polygons.')], HRESULT, 'UseFollowPolygonFeatureMode',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates whether the edit annotation tool will use follow feature mode when moving annotation related to polygons.')], HRESULT, 'UseFollowPolygonFeatureMode',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Symbol used to draw selected words in multiword annotation.')], HRESULT, 'MultiWordSelectionSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol)), 'symbol' )),
    COMMETHOD(['propputref', helpstring(u'Symbol used to draw selected words in multiword annotation.')], HRESULT, 'MultiWordSelectionSymbol',
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ISymbol), 'symbol' )),
]
################################################################
## code template for IEditAnnotationProperties implementation
##class IEditAnnotationProperties_Impl(object):
##    def _get(self):
##        u'Indicates whether the edit annotation tool will use follow feature mode when moving annotation related to lines.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the edit annotation tool will use follow feature mode when moving annotation related to lines.'
##    UseFollowLineFeatureMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates whether the edit annotation tool will show the resize and rotate handles.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the edit annotation tool will show the resize and rotate handles.'
##    ShowAnnoHandles = property(_get, _set, doc = _set.__doc__)
##
##    def LeaderSymbol(self, callout):
##        u'Symbol used to draw a leader.'
##        #return 
##
##    def _get(self):
##        u'Indicates whether the edit annotation tool will use follow feature mode when moving annotation related to polygons.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates whether the edit annotation tool will use follow feature mode when moving annotation related to polygons.'
##    UseFollowPolygonFeatureMode = property(_get, _set, doc = _set.__doc__)
##
##    def MultiWordSelectionSymbol(self, symbol):
##        u'Symbol used to draw selected words in multiword annotation.'
##        #return 
##

class HorizontalAnnoConstructor(CoClass):
    u'An annotation feature constructor for creating horizontal annotation.'
    _reg_clsid_ = GUID('{22FD5F9D-A22F-4BDC-AC4E-129FB0575212}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
HorizontalAnnoConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationConstructor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

class DistanceConverter(CoClass):
    u'Converts distance values from one unit to another.'
    _reg_clsid_ = GUID('{8416E336-A7DF-45D9-9AD4-7E5D1B5EA92A}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
DistanceConverter._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IDistanceConverter2]

IEditToolEvents._methods_ = [
    COMMETHOD([helpstring(u'Called when the mouse button is first depressed.')], HRESULT, 'OnBeginMove',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'loc' )),
    COMMETHOD([helpstring(u'Called when mouse moves while left mouse button is depressed.')], HRESULT, 'OnMove',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'loc' )),
    COMMETHOD([helpstring(u'Called when the left mouse button is released.')], HRESULT, 'OnFinishMove',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'loc' )),
]
################################################################
## code template for IEditToolEvents implementation
##class IEditToolEvents_Impl(object):
##    def OnMove(self, loc):
##        u'Called when mouse moves while left mouse button is depressed.'
##        #return 
##
##    def OnBeginMove(self, loc):
##        u'Called when the mouse button is first depressed.'
##        #return 
##
##    def OnFinishMove(self, loc):
##        u'Called when the left mouse button is released.'
##        #return 
##

class PointConstructor(CoClass):
    u'Constructor for adding a point to a point/multipoint sketch geometry.'
    _reg_clsid_ = GUID('{47B25BAC-5E86-45D6-B219-76184D128516}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
PointConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

ITraverseWindow2._methods_ = [
    COMMETHOD(['propput', helpstring(u'Indicates if Traverse Window is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'vis' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Traverse Window is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'vis' )),
    COMMETHOD(['propget', helpstring(u'The specified start point of the traverse.')], HRESULT, 'StartPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'Start' )),
    COMMETHOD(['propput', helpstring(u'The specified start point of the traverse.')], HRESULT, 'StartPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Start' )),
    COMMETHOD(['propget', helpstring(u'The specified end point of the traverse.')], HRESULT, 'FinishPoint',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint)), 'Finish' )),
    COMMETHOD(['propput', helpstring(u'The specified end point of the traverse.')], HRESULT, 'FinishPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'Finish' )),
    COMMETHOD(['propget', helpstring(u'The number of courses in the traverse.')], HRESULT, 'CourseCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'A reference to the ith course.')], HRESULT, 'Course',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(ICourse)), 'Course' )),
    COMMETHOD(['propget', helpstring(u'The type of the course being added.')], HRESULT, 'CourseType',
              ( ['retval', 'out'], POINTER(esriCourseType), 'Type' )),
    COMMETHOD(['propput', helpstring(u'The type of the course being added.')], HRESULT, 'CourseType',
              ( ['in'], esriCourseType, 'Type' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the text in the ith measure is selected.')], HRESULT, 'MeasureSelected',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'sel' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the text in the ith measure is selected.')], HRESULT, 'MeasureSelected',
              ( ['in'], c_int, 'index' ),
              ( ['in'], VARIANT_BOOL, 'sel' )),
    COMMETHOD(['propget', helpstring(u'The ith value that defines the course to add.')], HRESULT, 'MeasureText',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'text' )),
    COMMETHOD(['propput', helpstring(u'The ith value that defines the course to add.')], HRESULT, 'MeasureText',
              ( ['in'], c_int, 'index' ),
              ( ['in'], BSTR, 'text' )),
    COMMETHOD(['propget', helpstring(u'The handle of the ith measure text control.')], HRESULT, 'MeasureHWND',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE), 'HWND' )),
    COMMETHOD(['propget', helpstring(u'If the course type is esriCTCurve or esriCTTangentCurve, describes the type of curve paramater that the ith measure text represents.')], HRESULT, 'CurveParameter',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(esriCurveParameter), 'curveParam' )),
    COMMETHOD(['propput', helpstring(u'If the course type is esriCTCurve or esriCTTangentCurve, describes the type of curve paramater that the ith measure text represents.')], HRESULT, 'CurveParameter',
              ( ['in'], c_int, 'index' ),
              ( ['in'], esriCurveParameter, 'curveParam' )),
    COMMETHOD(['propget', helpstring(u'If the course type is esriCTCurve or esriCTTangentCurve, indicates if the curve turns to the left or right.')], HRESULT, 'TurnDirection',
              ( ['retval', 'out'], POINTER(esriTurnDirection), 'direction' )),
    COMMETHOD(['propput', helpstring(u'If the course type is esriCTCurve or esriCTTangentCurve, indicates if the curve turns to the left or right.')], HRESULT, 'TurnDirection',
              ( ['in'], esriTurnDirection, 'direction' )),
    COMMETHOD(['propget', helpstring(u'If the course type is esriCTCurve, defines the direction type of the curve.')], HRESULT, 'CurveDirectionType',
              ( ['retval', 'out'], POINTER(esriCurveDirectionType), 'direction' )),
    COMMETHOD(['propput', helpstring(u'If the course type is esriCTCurve, defines the direction type of the curve.')], HRESULT, 'CurveDirectionType',
              ( ['in'], esriCurveDirectionType, 'direction' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Add command on the Traverse Window dialog is enabled.')], HRESULT, 'IsAddEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'Enabled' )),
    COMMETHOD([helpstring(u'Add the course that is defined by the current course parameters.')], HRESULT, 'Add'),
    COMMETHOD([helpstring(u'Change the focus to the ith measure text control.')], HRESULT, 'SetFocusToMeasure',
              ( ['in'], c_int, 'index' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the traverse is a closed loop.')], HRESULT, 'IsClosedLoop',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'closed' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the traverse is a closed loop.')], HRESULT, 'IsClosedLoop',
              ( ['in'], VARIANT_BOOL, 'closed' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the Finish command on the Traverse Window dialog is enabled.')], HRESULT, 'IsFinishEnabled',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'finished' )),
    COMMETHOD([helpstring(u'Removes the ith course from the traverse.')], HRESULT, 'Remove',
              ( ['in'], c_int, 'index' )),
    COMMETHOD([helpstring(u'Finishes the traverse.')], HRESULT, 'Finish'),
]
################################################################
## code template for ITraverseWindow2 implementation
##class ITraverseWindow2_Impl(object):
##    @property
##    def IsFinishEnabled(self):
##        u'Indicates if the Finish command on the Traverse Window dialog is enabled.'
##        #return finished
##
##    def _get(self):
##        u'The type of the course being added.'
##        #return Type
##    def _set(self, Type):
##        u'The type of the course being added.'
##    CourseType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'The specified end point of the traverse.'
##        #return Finish
##    def _set(self, Finish):
##        u'The specified end point of the traverse.'
##    FinishPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if Traverse Window is visible.'
##        #return vis
##    def _set(self, vis):
##        u'Indicates if Traverse Window is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def Remove(self, index):
##        u'Removes the ith course from the traverse.'
##        #return 
##
##    def _get(self, index):
##        u'Indicates if the text in the ith measure is selected.'
##        #return sel
##    def _set(self, index, sel):
##        u'Indicates if the text in the ith measure is selected.'
##    MeasureSelected = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CourseCount(self):
##        u'The number of courses in the traverse.'
##        #return Count
##
##    def _get(self):
##        u'Indicates if the traverse is a closed loop.'
##        #return closed
##    def _set(self, closed):
##        u'Indicates if the traverse is a closed loop.'
##    IsClosedLoop = property(_get, _set, doc = _set.__doc__)
##
##    def SetFocusToMeasure(self, index):
##        u'Change the focus to the ith measure text control.'
##        #return 
##
##    @property
##    def Course(self, index):
##        u'A reference to the ith course.'
##        #return Course
##
##    def Add(self):
##        u'Add the course that is defined by the current course parameters.'
##        #return 
##
##    def Finish(self):
##        u'Finishes the traverse.'
##        #return 
##
##    def _get(self):
##        u'If the course type is esriCTCurve or esriCTTangentCurve, indicates if the curve turns to the left or right.'
##        #return direction
##    def _set(self, direction):
##        u'If the course type is esriCTCurve or esriCTTangentCurve, indicates if the curve turns to the left or right.'
##    TurnDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, index):
##        u'The ith value that defines the course to add.'
##        #return text
##    def _set(self, index, text):
##        u'The ith value that defines the course to add.'
##    MeasureText = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'If the course type is esriCTCurve, defines the direction type of the curve.'
##        #return direction
##    def _set(self, direction):
##        u'If the course type is esriCTCurve, defines the direction type of the curve.'
##    CurveDirectionType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self, index):
##        u'If the course type is esriCTCurve or esriCTTangentCurve, describes the type of curve paramater that the ith measure text represents.'
##        #return curveParam
##    def _set(self, index, curveParam):
##        u'If the course type is esriCTCurve or esriCTTangentCurve, describes the type of curve paramater that the ith measure text represents.'
##    CurveParameter = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MeasureHWND(self, index):
##        u'The handle of the ith measure text control.'
##        #return HWND
##
##    def _get(self):
##        u'The specified start point of the traverse.'
##        #return Start
##    def _set(self, Start):
##        u'The specified start point of the traverse.'
##    StartPoint = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsAddEnabled(self):
##        u'Indicates if the Add command on the Traverse Window dialog is enabled.'
##        #return Enabled
##

IEnumMapFeature._methods_ = [
    COMMETHOD([helpstring(u'Retrieves the next feature and its featurelayer in the sequence.')], HRESULT, 'Next',
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'ppFeature' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IFeatureLayer)), 'ppLayer' )),
]
################################################################
## code template for IEnumMapFeature implementation
##class IEnumMapFeature_Impl(object):
##    def Next(self):
##        u'Retrieves the next feature and its featurelayer in the sequence.'
##        #return ppFeature, ppLayer
##

class IAttributeTransferDefaultSettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'Provides access to members that control the behavior of the attribute transfer tools.'
    _iid_ = GUID('{8CBF9342-FA22-4AB4-AD58-6D7D3CD7C5C5}')
    _idlflags_ = ['oleautomation']
IAttributeTransferDefaultSettings._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the source attribute source.')], HRESULT, 'SourceName',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'Name of the source attribute source.')], HRESULT, 'SourceName',
              ( ['in'], BSTR, 'pName' )),
    COMMETHOD(['propget', helpstring(u'Name of the target attribute source.')], HRESULT, 'TargetName',
              ( ['retval', 'out'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propput', helpstring(u'Name of the target attribute source.')], HRESULT, 'TargetName',
              ( ['in'], BSTR, 'pName' )),
]
################################################################
## code template for IAttributeTransferDefaultSettings implementation
##class IAttributeTransferDefaultSettings_Impl(object):
##    def _get(self):
##        u'Name of the source attribute source.'
##        #return pName
##    def _set(self, pName):
##        u'Name of the source attribute source.'
##    SourceName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Name of the target attribute source.'
##        #return pName
##    def _set(self, pName):
##        u'Name of the target attribute source.'
##    TargetName = property(_get, _set, doc = _set.__doc__)
##

class TraceConstructor(CoClass):
    u'Adds segments by tracing existing features.'
    _reg_clsid_ = GUID('{A14648BE-5209-4665-B333-6B5FE5159633}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
TraceConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IShapeConstructor]

ISketchOperation._methods_ = [
    COMMETHOD(['propput', helpstring(u'The text that appears in the undo menu choice.')], HRESULT, 'MenuString',
              ( ['in'], BSTR, 'rhs' )),
    COMMETHOD([helpstring(u'Starts the operation, caching the existing sketch. Call this before modifying the sketch.')], HRESULT, 'Start',
              ( ['in'], POINTER(IEditor), 'Editor' )),
    COMMETHOD([helpstring(u'Finishes the operation and puts it into the operation stack. Call this after the sketch has been modified.')], HRESULT, 'Finish',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'invalEnv' )),
]
################################################################
## code template for ISketchOperation implementation
##class ISketchOperation_Impl(object):
##    def Start(self, Editor):
##        u'Starts the operation, caching the existing sketch. Call this before modifying the sketch.'
##        #return 
##
##    def Finish(self, invalEnv):
##        u'Finishes the operation and puts it into the operation stack. Call this after the sketch has been modified.'
##        #return 
##
##    def _set(self, rhs):
##        u'The text that appears in the undo menu choice.'
##    MenuString = property(fset = _set, doc = _set.__doc__)
##

IAnnotationConstructor._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the annotation constructor.')], HRESULT, 'Name',
              ( ['retval', 'out'], POINTER(BSTR), 'Name' )),
    COMMETHOD(['propget', helpstring(u'The type of geometry used for the edit sketch constructor.')], HRESULT, 'SketchGeometryType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'sketchType' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the annotation feature can be constructed given the number of points in the edit sketch.')], HRESULT, 'CanFinish',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'sketchGeometry' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'CanFinish' )),
    COMMETHOD([helpstring(u'The annotation editor extension.')], HRESULT, 'Startup',
              ( ['in'], POINTER(IEditor), 'pEditor' )),
    COMMETHOD([helpstring(u'The constructor start event.')], HRESULT, 'Shutdown'),
    COMMETHOD([helpstring(u'The display feedback for the constructor.')], HRESULT, 'CreateFeedback',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IDisplayFeedback)), 'feedback' )),
    COMMETHOD([helpstring(u'Starts the display feedback for the annotation constructor.')], HRESULT, 'StartFeedback',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Adds a point to the display feedback.')], HRESULT, 'AddFeedbackPoint',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' )),
    COMMETHOD([helpstring(u'Updates the display feedback with the current settings.')], HRESULT, 'UpdateFeedback'),
    COMMETHOD([helpstring(u'Stops the display feedback.')], HRESULT, 'StopFeedback'),
    COMMETHOD([helpstring(u'Called when a key is pressed.')], HRESULT, 'OnKeyDown',
              ( ['in'], c_int, 'keyState' ),
              ( ['in'], c_int, 'shift' )),
    COMMETHOD([helpstring(u'Called when a key is pressed.')], HRESULT, 'OnKeyUp',
              ( ['in'], c_int, 'keyState' ),
              ( ['in'], c_int, 'shift' )),
    COMMETHOD([helpstring(u'Lets the constructor know the annotation is about to be stored.')], HRESULT, 'BeforeStoreAnnotation',
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IAnnotationFeature), 'annotationFeature' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'sketchGeometry' )),
]
################################################################
## code template for IAnnotationConstructor implementation
##class IAnnotationConstructor_Impl(object):
##    def UpdateFeedback(self):
##        u'Updates the display feedback with the current settings.'
##        #return 
##
##    @property
##    def Name(self):
##        u'Name of the annotation constructor.'
##        #return Name
##
##    @property
##    def CanFinish(self, sketchGeometry):
##        u'Indicates if the annotation feature can be constructed given the number of points in the edit sketch.'
##        #return CanFinish
##
##    def CreateFeedback(self):
##        u'The display feedback for the constructor.'
##        #return feedback
##
##    def StartFeedback(self, point):
##        u'Starts the display feedback for the annotation constructor.'
##        #return 
##
##    def AddFeedbackPoint(self, point):
##        u'Adds a point to the display feedback.'
##        #return 
##
##    def Startup(self, pEditor):
##        u'The annotation editor extension.'
##        #return 
##
##    def OnKeyDown(self, keyState, shift):
##        u'Called when a key is pressed.'
##        #return 
##
##    def BeforeStoreAnnotation(self, annotationFeature, sketchGeometry):
##        u'Lets the constructor know the annotation is about to be stored.'
##        #return 
##
##    def Shutdown(self):
##        u'The constructor start event.'
##        #return 
##
##    def StopFeedback(self):
##        u'Stops the display feedback.'
##        #return 
##
##    def OnKeyUp(self, keyState, shift):
##        u'Called when a key is pressed.'
##        #return 
##
##    @property
##    def SketchGeometryType(self):
##        u'The type of geometry used for the edit sketch constructor.'
##        #return sketchType
##

ISelectionResolutionChip._methods_ = [
    COMMETHOD([helpstring(u'Shows the selection resolution chip.')], HRESULT, 'Show',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'clickPt' ),
              ( ['in'], POINTER(ISelectionResolutionImpl), 'selSelector' )),
    COMMETHOD([helpstring(u'Hides the selection resolution chip.')], HRESULT, 'Hide'),
    COMMETHOD([helpstring(u'Shows the selection resolution chip and require a response.')], HRESULT, 'DoModal',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'clickPt' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IFeatureLayer)), 'featureLayer' ),
              ( ['out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IFeature)), 'feature' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the candidate features must be selectable.')], HRESULT, 'MustBeSelectable',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the candidate features must be selectable.')], HRESULT, 'MustBeSelectable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if the candidate features must be editable.')], HRESULT, 'MustBeEditable',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if the candidate features must be editable.')], HRESULT, 'MustBeEditable',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if point feature candidates are allowed.')], HRESULT, 'AllowPointFeatures',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if point feature candidates are allowed.')], HRESULT, 'AllowPointFeatures',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if line feature candidates are allowed.')], HRESULT, 'AllowLineFeatures',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if line feature candidates are allowed.')], HRESULT, 'AllowLineFeatures',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if polygon feature candidates are allowed.')], HRESULT, 'AllowPolygonFeatures',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if polygon feature candidates are allowed.')], HRESULT, 'AllowPolygonFeatures',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'Indicates if annotation feature candidates are allowed.')], HRESULT, 'AllowAnnoFeatures',
              ( ['in'], VARIANT_BOOL, 'flag' )),
    COMMETHOD(['propget', helpstring(u'Indicates if annotation feature candidates are allowed.')], HRESULT, 'AllowAnnoFeatures',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'flag' )),
    COMMETHOD(['propput', helpstring(u'The combination method used when clicked.')], HRESULT, 'CombinationMethod',
              ( ['in'], comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.esriSelectionResultEnum, 'rhs' )),
]
################################################################
## code template for ISelectionResolutionChip implementation
##class ISelectionResolutionChip_Impl(object):
##    def _get(self):
##        u'Indicates if polygon feature candidates are allowed.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if polygon feature candidates are allowed.'
##    AllowPolygonFeatures = property(_get, _set, doc = _set.__doc__)
##
##    def Hide(self):
##        u'Hides the selection resolution chip.'
##        #return 
##
##    def _get(self):
##        u'Indicates if line feature candidates are allowed.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if line feature candidates are allowed.'
##    AllowLineFeatures = property(_get, _set, doc = _set.__doc__)
##
##    def Show(self, clickPt, selSelector):
##        u'Shows the selection resolution chip.'
##        #return 
##
##    def _get(self):
##        u'Indicates if annotation feature candidates are allowed.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if annotation feature candidates are allowed.'
##    AllowAnnoFeatures = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if point feature candidates are allowed.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if point feature candidates are allowed.'
##    AllowPointFeatures = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the candidate features must be editable.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the candidate features must be editable.'
##    MustBeEditable = property(_get, _set, doc = _set.__doc__)
##
##    def DoModal(self, clickPt):
##        u'Shows the selection resolution chip and require a response.'
##        #return featureLayer, feature
##
##    def _set(self, rhs):
##        u'The combination method used when clicked.'
##    CombinationMethod = property(fset = _set, doc = _set.__doc__)
##
##    def _get(self):
##        u'Indicates if the candidate features must be selectable.'
##        #return flag
##    def _set(self, flag):
##        u'Indicates if the candidate features must be selectable.'
##    MustBeSelectable = property(_get, _set, doc = _set.__doc__)
##

class SketchTraceCommand(CoClass):
    u'Initializes a new TraceConstructor on the Editor.'
    _reg_clsid_ = GUID('{787D771D-AC3E-4CA5-8855-B14F298BE5C5}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchTraceCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

IRepresentationRuleEditor._methods_ = [
    COMMETHOD([helpstring(u'Displays the representation rule editor dialog.')], HRESULT, 'DoModal',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'parentWnd' ),
              ( ['in'], comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType, 'Type' ),
              ( ['in'], POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IRepresentationRule), 'Rule' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'ok' )),
    COMMETHOD(['propget', helpstring(u'Geometry type edited by the dialog.')], HRESULT, 'GeometryType',
              ( ['retval', 'out'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.esriGeometryType), 'Type' )),
    COMMETHOD(['propget', helpstring(u'Representation rule edited by the dialog.')], HRESULT, 'Rule',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.IRepresentationRule)), 'Rule' )),
]
################################################################
## code template for IRepresentationRuleEditor implementation
##class IRepresentationRuleEditor_Impl(object):
##    def DoModal(self, parentWnd, Type, Rule):
##        u'Displays the representation rule editor dialog.'
##        #return ok
##
##    @property
##    def GeometryType(self):
##        u'Geometry type edited by the dialog.'
##        #return Type
##
##    @property
##    def Rule(self):
##        u'Representation rule edited by the dialog.'
##        #return Rule
##

ISnapEnvironment3._methods_ = [
    COMMETHOD([helpstring(u'Attempts to snap the specified point to the given intersection.')], HRESULT, 'SnapToIntersection',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IGeometry), 'pIntersection' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'snapped' )),
    COMMETHOD([helpstring(u'Always attempts to snap the point using the current snap environment.  This should not be used to snap mouse position in a tool.')], HRESULT, 'FullPointSnap',
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IPoint), 'point' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'snapped' )),
]
################################################################
## code template for ISnapEnvironment3 implementation
##class ISnapEnvironment3_Impl(object):
##    def SnapToIntersection(self, point, pIntersection):
##        u'Attempts to snap the specified point to the given intersection.'
##        #return snapped
##
##    def FullPointSnap(self, point):
##        u'Always attempts to snap the point using the current snap environment.  This should not be used to snap mouse position in a tool.'
##        #return snapped
##

IAnnotationEditExtension._methods_ = [
    COMMETHOD(['propget', helpstring(u'The annotation constructors for creating new annotations.')], HRESULT, 'AnnotationConstructors',
              ( ['retval', 'out'], POINTER(POINTER(IEnumAnnotationConstructor)), 'constructors' )),
    COMMETHOD(['propget', helpstring(u'The currently selected annotation constructor.')], HRESULT, 'CurrentConstructor',
              ( ['retval', 'out'], POINTER(POINTER(IAnnotationConstructor)), 'Constructor' )),
    COMMETHOD(['propputref', helpstring(u'The currently selected annotation constructor.')], HRESULT, 'CurrentConstructor',
              ( ['in'], POINTER(IAnnotationConstructor), 'Constructor' )),
    COMMETHOD(['propget', helpstring(u'Indicates if an annotation feature class is the current editor target.')], HRESULT, 'IsAnnotationTarget',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'isAnnotation' )),
    COMMETHOD(['propget', helpstring(u'The current text that will be used to construct the annotation.')], HRESULT, 'ConstructionText',
              ( ['retval', 'out'], POINTER(BSTR), 'text' )),
    COMMETHOD(['propput', helpstring(u'The current text that will be used to construct the annotation.')], HRESULT, 'ConstructionText',
              ( ['in'], BSTR, 'text' )),
    COMMETHOD(['propget', helpstring(u'The symbol id of newly created annotation features.')], HRESULT, 'ConstructionSymbolID',
              ( ['retval', 'out'], POINTER(c_int), 'text' )),
    COMMETHOD(['propput', helpstring(u'The symbol id of newly created annotation features.')], HRESULT, 'ConstructionSymbolID',
              ( ['in'], c_int, 'text' )),
    COMMETHOD(['propget', helpstring(u'The symbol to be used for newly created annotation features.')], HRESULT, 'ConstructionSymbol',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._59FCCD31_434C_4017_BDEF_DB4B7EDC9CE0_0_10_2.ITextSymbol)), 'textSymbol' )),
    COMMETHOD(['propget', helpstring(u'The linked feature id for the newly created annotation feature.')], HRESULT, 'LinkedFeatureID',
              ( ['retval', 'out'], POINTER(c_int), 'featureID' )),
    COMMETHOD(['propput', helpstring(u'The linked feature id for the newly created annotation feature.')], HRESULT, 'LinkedFeatureID',
              ( ['in'], c_int, 'featureID' )),
]
################################################################
## code template for IAnnotationEditExtension implementation
##class IAnnotationEditExtension_Impl(object):
##    def _get(self):
##        u'The symbol id of newly created annotation features.'
##        #return text
##    def _set(self, text):
##        u'The symbol id of newly created annotation features.'
##    ConstructionSymbolID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ConstructionSymbol(self):
##        u'The symbol to be used for newly created annotation features.'
##        #return textSymbol
##
##    def _get(self):
##        u'The current text that will be used to construct the annotation.'
##        #return text
##    def _set(self, text):
##        u'The current text that will be used to construct the annotation.'
##    ConstructionText = property(_get, _set, doc = _set.__doc__)
##
##    def CurrentConstructor(self, Constructor):
##        u'The currently selected annotation constructor.'
##        #return 
##
##    def _get(self):
##        u'The linked feature id for the newly created annotation feature.'
##        #return featureID
##    def _set(self, featureID):
##        u'The linked feature id for the newly created annotation feature.'
##    LinkedFeatureID = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsAnnotationTarget(self):
##        u'Indicates if an annotation feature class is the current editor target.'
##        #return isAnnotation
##
##    @property
##    def AnnotationConstructors(self):
##        u'The annotation constructors for creating new annotations.'
##        #return constructors
##

IAttributeTransfer._methods_ = [
    COMMETHOD(['propget', helpstring(u'Name of the current attribute type.')], HRESULT, 'Name',
              ( ['in'], POINTER(BSTR), 'pName' )),
    COMMETHOD(['propputref', helpstring(u'Adds a field map. This will overwrite any existing field map with the same pair of source and target object classes.')], HRESULT, 'FieldMap',
              ( ['in'], POINTER(IFieldMap), 'rhs' )),
    COMMETHOD([helpstring(u'Delete a field map.')], HRESULT, 'DeleteFieldMap',
              ( ['in'], POINTER(IFieldMap), 'pFieldMap' )),
    COMMETHOD([helpstring(u'Finds a stored field mapping. A field map with any source or target can be found by place a null for the argument.')], HRESULT, 'FindFieldMap',
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClass), 'pSourceTable' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClass), 'pTargetTable' ),
              ( ['retval', 'out'], POINTER(POINTER(IFieldMap)), 'ppFieldMap' )),
    COMMETHOD([helpstring(u'Transfer attributes between rows based on the field map.')], HRESULT, 'Transfer',
              ( ['in'], POINTER(IFieldMap), 'pFieldMap' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow), 'pSourceRow' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IRow), 'pTargetRow' ),
              ( ['out'], POINTER(VARIANT_BOOL), 'pSuccessful' )),
]
################################################################
## code template for IAttributeTransfer implementation
##class IAttributeTransfer_Impl(object):
##    def Transfer(self, pFieldMap, pSourceRow, pTargetRow):
##        u'Transfer attributes between rows based on the field map.'
##        #return pSuccessful
##
##    def FindFieldMap(self, pSourceTable, pTargetTable):
##        u'Finds a stored field mapping. A field map with any source or target can be found by place a null for the argument.'
##        #return ppFieldMap
##
##    @property
##    def Name(self, pName):
##        u'Name of the current attribute type.'
##        #return 
##
##    def FieldMap(self, rhs):
##        u'Adds a field map. This will overwrite any existing field map with the same pair of source and target object classes.'
##        #return 
##
##    def DeleteFieldMap(self, pFieldMap):
##        u'Delete a field map.'
##        #return 
##

class SketchRightAngleCommand(CoClass):
    u'Initializes a new RightAngleConstructor on the Editor.'
    _reg_clsid_ = GUID('{99DE13F8-6B85-47CE-85B7-056EDF688648}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
SketchRightAngleCommand._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, comtypes.gen._4ECCA6E2_B16B_4ACA_BD17_E74CAE4C150A_0_10_2.ICommand]

IVersionChangesWindow._methods_ = [
    COMMETHOD([helpstring(u'Initialize Version Changes Window.')], HRESULT, 'Initialize',
              ( ['in'], comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.OLE_HANDLE, 'parentHwnd' ),
              ( ['in'], POINTER(comtypes.gen._45AC68FF_DEFF_4884_B3A9_7D882EDCAEF1_0_10_2.IMap), 'pMap' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'pSourceVersion' ),
              ( ['in'], POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IVersion), 'pTargetVersion' ),
              ( ['in'], POINTER(comtypes.gen._C4B094C2_FF32_4FA1_ABCB_7820F8D6FB68_0_10_2.IEnvelope), 'pEnvelope' ),
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanceled' )),
    COMMETHOD([helpstring(u'Re-Discover changes and re-populate window.')], HRESULT, 'RefreshChanges',
              ( ['in'], POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ITrackCancel), 'pTrackCancel' ),
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pCanceled' )),
    COMMETHOD(['propput', helpstring(u'Indicates if Version Changes Window is visible.')], HRESULT, 'Visible',
              ( ['in'], VARIANT_BOOL, 'pVisible' )),
    COMMETHOD(['propget', helpstring(u'Indicates if Version Changes Window is visible.')], HRESULT, 'Visible',
              ( ['retval', 'out'], POINTER(VARIANT_BOOL), 'pVisible' )),
    COMMETHOD(['propget', helpstring(u'The indexes of the fields in the row that are currently selected.')], HRESULT, 'SelectedFieldIndexes',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ILongArray)), 'ppLongArray' )),
    COMMETHOD(['propget', helpstring(u'ID of the current row or feature.')], HRESULT, 'CurrentRow',
              ( ['retval', 'out'], POINTER(c_int), 'pID' )),
    COMMETHOD(['propget', helpstring(u'Change Type of the selected row or feature.')], HRESULT, 'CurrentChangeType',
              ( ['retval', 'out'], POINTER(esriChangeType), 'pChangeType' )),
    COMMETHOD(['propget', helpstring(u'Class name of the selected row or feature.')], HRESULT, 'CurrentClass',
              ( ['retval', 'out'], POINTER(BSTR), 'pClassName' )),
    COMMETHOD(['propget', helpstring(u'The number of classes with changes.')], HRESULT, 'ClassCount',
              ( ['retval', 'out'], POINTER(c_int), 'pCount' )),
    COMMETHOD(['propget', helpstring(u'Class by index.')], HRESULT, 'Class',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(BSTR), 'pClassName' )),
    COMMETHOD(['propget', helpstring(u'Enumerate the difference row IDs of the current class.')], HRESULT, 'IDs',
              ( ['in'], BSTR, 'className' ),
              ( ['in'], esriChangeType, 'changeType' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IEnumIDs)), 'IDs' )),
    COMMETHOD([helpstring(u'Finds a cached table corresponding to specified version.')], HRESULT, 'FindClass',
              ( ['in'], BSTR, 'className' ),
              ( ['in'], esriChangeVersion, 'vers' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IObjectClass)), 'ppObjectClass' )),
]
################################################################
## code template for IVersionChangesWindow implementation
##class IVersionChangesWindow_Impl(object):
##    @property
##    def CurrentRow(self):
##        u'ID of the current row or feature.'
##        #return pID
##
##    @property
##    def CurrentChangeType(self):
##        u'Change Type of the selected row or feature.'
##        #return pChangeType
##
##    @property
##    def ClassCount(self):
##        u'The number of classes with changes.'
##        #return pCount
##
##    @property
##    def IDs(self, className, changeType):
##        u'Enumerate the difference row IDs of the current class.'
##        #return IDs
##
##    def _get(self):
##        u'Indicates if Version Changes Window is visible.'
##        #return pVisible
##    def _set(self, pVisible):
##        u'Indicates if Version Changes Window is visible.'
##    Visible = property(_get, _set, doc = _set.__doc__)
##
##    def RefreshChanges(self, pTrackCancel):
##        u'Re-Discover changes and re-populate window.'
##        #return pCanceled
##
##    @property
##    def SelectedFieldIndexes(self):
##        u'The indexes of the fields in the row that are currently selected.'
##        #return ppLongArray
##
##    def FindClass(self, className, vers):
##        u'Finds a cached table corresponding to specified version.'
##        #return ppObjectClass
##
##    def Initialize(self, parentHwnd, pMap, pSourceVersion, pTargetVersion, pEnvelope, pTrackCancel):
##        u'Initialize Version Changes Window.'
##        #return pCanceled
##
##    @property
##    def CurrentClass(self):
##        u'Class name of the selected row or feature.'
##        #return pClassName
##
##    @property
##    def Class(self, index):
##        u'Class by index.'
##        #return pClassName
##

class CurvedAnnoConstructor(CoClass):
    u'An annotation feature constructor for creating curved annotation.'
    _reg_clsid_ = GUID('{64B6CC7A-E099-4717-B176-D688D0B023C4}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{4C896230-7F1A-11D2-8509-0000F875B9C6}', 10, 2)
CurvedAnnoConstructor._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAnnotationConstructor, comtypes.gen._5E1F7BC3_67C5_4AEE_8EC6_C4B73AAC42ED_0_10_2.ISupportErrorInfo]

IObjectInspectorPanel._methods_ = [
    COMMETHOD(['propget', helpstring(u'The table being edited.')], HRESULT, 'Table',
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.ITable)), 'Table' )),
    COMMETHOD(['propget', helpstring(u'The row or rows being inspected.')], HRESULT, 'Rows',
              ( ['retval', 'out'], POINTER(POINTER(IEnumRow)), 'objects' )),
    COMMETHOD(['propget', helpstring(u'The number of attribute fields displayed.')], HRESULT, 'FieldCount',
              ( ['retval', 'out'], POINTER(c_int), 'Count' )),
    COMMETHOD(['propget', helpstring(u'Attribute field by index.')], HRESULT, 'Field',
              ( ['in'], c_int, 'index' ),
              ( ['retval', 'out'], POINTER(POINTER(comtypes.gen._0475BDB1_E5B2_4CA2_9127_B4B1683E70C2_0_10_2.IField)), 'Field' )),
    COMMETHOD(['propget', helpstring(u'The index of the selected field, or -1.')], HRESULT, 'SelectedField',
              ( ['retval', 'out'], POINTER(c_int), 'index' )),
    COMMETHOD(['propput', helpstring(u'The index of the selected field, or -1.')], HRESULT, 'SelectedField',
              ( ['in'], c_int, 'index' )),
]
################################################################
## code template for IObjectInspectorPanel implementation
##class IObjectInspectorPanel_Impl(object):
##    @property
##    def Table(self):
##        u'The table being edited.'
##        #return Table
##
##    @property
##    def FieldCount(self):
##        u'The number of attribute fields displayed.'
##        #return Count
##
##    @property
##    def Rows(self):
##        u'The row or rows being inspected.'
##        #return objects
##
##    def _get(self):
##        u'The index of the selected field, or -1.'
##        #return index
##    def _set(self, index):
##        u'The index of the selected field, or -1.'
##    SelectedField = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Field(self, index):
##        u'Attribute field by index.'
##        #return Field
##

__all__ = [ 'HorizontalAnnoConstructor', 'DimensionStyleDialog',
           'esriChangeVersion', 'FreeLinearConstructor',
           'DistanceDistanceConstructor', 'LeaderAnnoConstructor',
           'ISketchOperation', 'AnnotationEditExtension',
           'ISnapAgentCategory', 'esriCurrentVersion',
           'esriZCaptureType', 'esriCaptureCurrentZ',
           'ITraverseWindowEvents', 'esriStateEditing',
           'ISnapEnvironment2', 'CutPolygonsTool', 'ITraverseWindow2',
           'esriAdjustmentTypeCrandall', 'IAttributeTransferType',
           'SketchEndPointArcCommand', 'EditSelection',
           'esriAdjustmentType', 'RightAngleConstructor',
           'SketchIntersectionCommand', 'esriTDLeft',
           'TemplateGeneralPropertyPage', 'AlignedConstructor',
           'SelectionResolutionChip', 'RotatedLinearConstructor',
           'IEnumAnnotationConstructor', 'RepresentationRuleEditor',
           'StretchProportionalCommand', 'IRepresentationWindow',
           'esriSketchOperationVertexAdded', 'CreateFeatureDockWin',
           'CurvedAnnoConstructor', 'FreeAlignedConstructor',
           'esriCTAngleDistance', 'esriEditState', 'IConflictsWindow',
           'IDistanceConverter', 'IObjectInspector',
           'SketchOperation', 'SketchTraceCommand',
           'EditSelectionCache', 'IEditor',
           'esriSnapToleranceMapUnits', 'Course', 'esriCDTRadial',
           'IDimensionConstructor', 'ISketchTool', 'IEditProperties4',
           'SketchArcCommand', 'IEditProperties2', 'IEditProperties3',
           'esriChangeTypeDelete', 'IDimensionStyleDialog',
           'esriCommonAncestorVersion',
           'RepresentationRulesPropertyPage', 'ITransmogrifyTask',
           'ReplaceGeometryTool', 'PointFeatureTool',
           'FollowFeatureAnnoConstructor', 'IEditEvents4',
           'IEditEvents5', 'IEditEvents2', 'LineFeatureTool',
           'esriCTLBelow', 'EditTool', 'PointAtEndOfLineTool',
           'EnumDimensionStyle', 'IObjectInspectorPanel',
           'esriCTTangentCurve', 'E_EDITOR_CANTEDITAIWORKSPACE',
           'esriCPRadius', 'IAnnotationEditExtension',
           'esriChangeTypeUndefined', 'esriCourseType',
           'esriCurveDirectionType', 'IDistanceConverter2',
           'SketchConstructor', 'esriCPArc', 'IEnumFieldMap',
           'IConflictsWindow3', 'ConstructionMiniBar',
           'esriConstraintAngle', 'SketchDistanceDistanceCommand',
           'esriSketchConstraint', 'AttributeWindow',
           'IEditSketchExtension2', 'esriConstraintDistance',
           'esriStateEditingUnfocused', 'ConstructPointsCommand',
           'AnnotationConstructionWindow', 'IAttributeWindow',
           'AutoCompletePolygonFeatureTool', 'DimensionPropertyPage',
           'esriCPAngle', 'ISnapAgent', 'VersionChangesWindow',
           'IEditToolEvents', 'PolygonFeatureTool', 'IEditSketch',
           'IAnnotationConstructionWindow', 'esriPreReconcileVersion',
           'IConstructionMiniBar', 'ISnapEnvironment3',
           'SketchPropertiesWindow', 'ISelectionResolutionChip',
           'esriReconcileVersion', 'PointConstructor',
           'AngleDistanceConstructor', 'StraightConstructor',
           'IFeatureSnapAgent2', 'RepresentationMarkerEditor',
           'IDimensionEditExtension', 'ISnappingWindow',
           'IShapeConstructorTool', 'ITraverseWindow',
           'IEnumDimensionConstructor', 'esriTurnDirection',
           'IEnumMapFeature', 'TangentCurveConstructor',
           'IAttributeTransfer', 'IEnumRow2', 'esriChangeTypeInsert',
           'esriSketchOperationVertexDeleted',
           'RepresentationInspector', 'MirrorFeaturesTool',
           'DimensionEditExtension', 'ISketchOperation2',
           'esriStateNotEditing', 'esriCTLOnTop',
           'SketchMidpointCommand', 'esriChangeSourceVersion',
           'IAttributeWindowEvents', 'IEditor3', 'ReshapeFeatureTool',
           'esriVersion', 'DigitizerExtension',
           'StraightAnnoConstructor', 'EditToolEvents',
           'esriConstraintNone', 'IAnnotationConstructor',
           'SketchPointCommand', 'esriCaptureInterpolateZ',
           'SketchAngleDistanceCommand', 'IModifyTask',
           'esriCaptureSurfaceZ', 'IEditTool',
           'IRepresentationMarkerEditor', 'IEditProperties',
           'esriCTCurve', 'ContinueFeatureTool',
           'esriChangeTypeUpdate', 'IEnumRow', 'IEditSelectionCache',
           'IEditEvents3', 'EndPointArcConstructor', 'EditEvents4',
           'EditEvents5', 'EditEvents2', 'FeatureInspector',
           'esriStartEditingVersion', 'SketchRightAngleCommand',
           'TraverseAdjustment', 'UnplacedAnnotationWindow',
           'TraceConstructor', 'IAttributeTransferDefaultSettings',
           'DimensionStyleImportDialog', 'SimpleAlignedConstructor',
           'IEditSelectionCache3', 'IEditSelectionCache2',
           'esriCDTChord', 'esriChangeCommonAncestorVersion',
           'esriCurveParameter', 'SketchBezierCurveCommand',
           'esriConstructionToolbarLocation', 'IFieldMap',
           'IDimensionStyleImportDialog', 'Editor', 'IEditSketch3',
           'IEditSketch2', 'IRepresentationRuleEditor',
           'MidpointConstructor', 'IEditor2',
           'ISketchPropertiesWindow', 'esriCTLAbove',
           'esriCTDirectionDistance', 'SketchStraightCommand',
           'IEditLocation', 'esriChangeType',
           'IEditAttributeProperties', 'FeatureSnap', 'esriCPChord',
           'esriTDRight', 'IEditSketchExtension',
           'ITraverseAdjustment', 'IEditEvents',
           'esriChangeTargetVersion', 'IEditTaskName',
           'IProtectNameEditor', 'ISnapAgentFeedback',
           'AnnotationInspector', 'INotifyZFinalize',
           'IEditAnnotationProperties', 'IEditTaskSearch',
           'TraverseWindow', 'IRepresentationRuleEditor2',
           'ITraverseClosure', 'esriSketchOperationVertexMoved',
           'ISnapEnvironment', 'IFeatureSnapAgent',
           'esriSketchOperationGeneral', 'IntersectionConstructor',
           'ICustomSnapping', 'RepresentationClassPropertyPage',
           'IConflictsWindow2', 'IVersionChangesWindow',
           'IDigitizerSetup', 'DimensionInspector',
           'SketchTangentCurveCommand', 'ICourse', 'IEditLayers',
           'esriSketchOperationType', 'IExtendedObjectInspector',
           'esriSnapTolerancePixels', 'DistanceConverter',
           'IConstructionMiniBar2', 'ICreateFeatureTask',
           'ArcConstructor', 'BezierCurveConstructor',
           'IShapeConstructor', 'IDigitizerButtons', 'IEditorZ',
           'esriAdjustmentTypeTransit', 'ISelectionResolutionImpl',
           'IConflictDisplay', 'esriAdjustmentTypeCompass',
           'ConflictsWindow', 'esriSnapToleranceUnits',
           'LinearConstructor', 'esriEditorError', 'esriCDTTangent',
           'IEditTask', 'esriCTLLast', 'EditEvents3']
from comtypes import _check_version; _check_version('')
